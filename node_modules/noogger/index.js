/** todo
 *
 *  En/Disabling Console output according to logLevels
 *  En/Disabling writing to file according to logLevels
 *  0.1.3
 * 
 *  Add events such as on<logLevel>
 *  option to separate log files per logLevels
 *  0.1.4
 * --------------------------------- 
 *  Support for js Object and Arrays
 *  organize log levels in folders of months and years - optional
 *  feature for archives, and zipping old logs 
 *  0.1.5
 *  
 *
 * 
 * add more log levels trace, fatal
 *  send email alerts
 * Allows for multiple configurable destination streams. For example, you might be writing trace logs to one file but when an error is encountered, write to the same file, then into error file and send an email at the same time.
 * 0.1.6
 * 
*/
var fs  = require('fs');
var now = require('moment');
var chalk =  require('chalk');

var  c_emergency = chalk.bold.red;
var  c_alert =  chalk.red;
var  c_critical =  chalk.bgRed.black;
var  c_error =  chalk.bgBlack.red;
var  c_warning =  chalk.yellow.bold;
var  c_notice =  chalk.blue.bold;
var  c_info =  chalk.white;
var  c_debug =  chalk.green;
var  c_date = chalk.dim;
var  c_logLevel= chalk.inverse;

var logLevels = [];
	logLevels['EMERGENCY']= 0;
	logLevels['ALERT']    = 1;	
	logLevels['CRITICAL'] = 2; 
	logLevels['ERROR']    = 3;
	logLevels['WARNING']  = 4;
	logLevels['NOTICE']   = 5;
	logLevels['INFO']     = 6;
	logLevels['DEBUG']    = 7;

var self =this;
var initialized =false;

var opts = {
	consoleOutput : true,
	consoleOutputLevel: 'DEBUG',
	fileOutput: true,
	fileOutputLevel: 0, // ['DEBUG','TRACE'],
	dateTimeFormat: "DD-MM-YYYY HH:mm:ss.S",
	outputPath: "logs/",
	fileNameDateFormat: "DDMMYYYY",
	fileNamePrefix:"",
	fileNameSuffix:""
};


/*** Misc Functions */
var mkdirSync = function (path) { // implement recursion http://stackoverflow.com/questions/13696148/node-js-create-folder-or-use-existing#24311711
  try {
    fs.mkdirSync(path);
  } catch(e) {
    // if ( e.code != 'EEXIST' ) throw e;
	if ( e.code != 'EEXIST' ) console.log(e);
  }
}

String.prototype.leftJustify = function( length, char ) {
    var fill = [];
    while ( fill.length + this.length < length ) {
      fill[fill.length] = char;
    }
    return fill.join('') + this;
}

String.prototype.rightJustify = function( length, char ) {
    var fill = [];
    while ( fill.length + this.length < length ) {
      fill[fill.length] = char;
    }
    return this + fill.join('');
}


function dfault( defArg, defVal){ /*  to enable default parameters in functions */
	return ( typeof defArg !== 'undefined' ? defArg : defVal) ;
}

function isset(obj){
    return (typeof obj !=='undefined' ? true : false);
}

/* Misc Functions ***/

function init(o){
	
	opts.outputPath = dfault( o.outputPath, opts.outputPath );
	
	opts.consoleOutput = dfault(o.consoleOutput, opts.consoleOutput );
	opts.consoleOutputLevel = dfault(o.consoleOutputLevel, opts.consoleOutputLevel );
	
	opts.fileOutput = dfault(o.fileOutput, opts.fileOutput);
	opts.fileOutputLevel= dfault(o.fileOutputLevel, opts.fileOutputLevel);
	
	opts.dateTimeFormat = dfault(o.dateTimeFormat, opts.dateTimeFormat );
	opts.fileNamePrefix = dfault(o.fileNamePrefix, opts.fileNamePrefix );
	opts.fileNameSuffix = dfault(o.fileNameSuffix, opts.fileNameSuffix );
	opts.fileNameDateFormat = dfault(o.fileNameDateFormat, opts.fileNameDateFormat  );
	
	//console.log("********************************");
	console.log("********************************");
	console.log("Console output " + (opts.consoleOutput ? "enabled" : "disabled") );
	console.log("Console output logLevel: " + opts.consoleOutputLevel);
	//console.log("File output " + (opts.fileOutput ? "enabled" : "disabled") );
	//console.log("File output logLevel: " + opts.fileOutputLevel);
	console.log("Writing logs file to: " + opts.outputPath);
	console.log("********************************");
	//console.log("********************************");
	
	/*
	opts.outputPath = ( typeof o.outputPath !== 'undefined' ?  o.outputPath : opts.outputPath  );
	
	opts.consoleOutput = ( typeof o.consoleOutput !== 'undefined' ?  o.consoleOutput : opts.consoleOutput );
	opts.consoleOutputLevel = ( typeof o.consoleOutputLevel !== 'undefined' ?  o.consoleOutputLevel : opts.consoleOutputLevel );
	
	opts.fileOutput = ( typeof o.fileOutput !== 'undefined' ? o.fileOutput : opts.fileOutput);
	opts.fileOutputLevel= ( typeof o.fileOutputLevel !== 'undefined' ? o.fileOutputLevel : opts.fileOutputLevel);
	
	opts.dateTimeFormat = ( typeof o.dateTimeFormat !== 'undefined' ?  o.dateTimeFormat : opts.dateTimeFormat );
	opts.fileNamePrefix = ( typeof o.fileNamePrefix !== 'undefined' ?  o.fileNamePrefix : opts.fileNamePrefix );
	opts.fileNameSuffix = ( typeof o.fileNameSuffix !== 'undefined' ?  o.fileNameSuffix : opts.fileNameSuffix );
	opts.fileNameDateFormat = ( typeof o.fileNameDateFormat !== 'undefined' ?  o.fileNameDateFormat : opts.fileNameDateFormat  );
	*/
	
    mkdirSync(opts.outputPath);
	initialized =true;
	return self;
}

function logIt(txt,logLevel, consoleOut){
	var out = dfault(consoleOut , opts.consoleOutput);
	
	if(!initialized) init(opts);
	
	var filename = opts.fileNamePrefix + now().format(opts.fileNameDateFormat) + opts.fileNameSuffix +".log";
	var logLine= now().format(opts.dateTimeFormat)+" ["+logLevel+"] "+txt+"\r\n";

	if(out) 
	{
		var cout = c_date( now().format(opts.dateTimeFormat) )
	         + ' '+c_logLevel('['+logLevel.rightJustify(9,' ')+']')
			 + '  '+txt;
		switch (logLevel) {
			case 'EMERGENCY': cout= c_emergency(cout);	break;
			case 'ALERT':	  cout= c_alert(cout);	break;
			case 'CRITICAL':  cout= c_critical(cout);	break;
			case 'ERROR': 	  cout= c_error(cout);	break;
			case 'WARNING':   cout= c_warning(cout);	break;
			case 'NOTICE': 	  cout= c_notice(cout);	break;
			case 'INFO': 	  cout= c_info(cout);	break;
			case 'DEBUG': 	  cout= c_debug(cout);	break;
		}
		
		if(typeof opts.consoleOutputLevel != 'object' )
				var maxLevel =logLevels[opts.consoleOutputLevel] ;
		
		switch(typeof opts.consoleOutputLevel) {
			
			case 'number': maxLevel = opts.consoleOutputLevel;
			case 'string': 
				if( logLevels[logLevel] <= maxLevel)
				{
					if(isset(consoleOut)) 
					{
					if(consoleOut)
						console.log(cout);
					}
					else
					console.log(cout);
				}
				else if(isset(consoleOut)) 
				{
					if(consoleOut)
						console.log(cout);
				}
			break;		
			
			default: //Array
			
				if( opts.consoleOutputLevel.indexOf(logLevel) > -1)
				{
					if(isset(consoleOut)) 
					{
					if(consoleOut)
						console.log(cout);
					}
					else
					console.log(cout);
				}
				else if(isset(consoleOut)) 
				{
					if(consoleOut)
						console.log(cout);
				}
			break;
			
		}		
		
	}		
	
	var path= opts.outputPath+filename;
	fs.appendFile(path, logLine, function(err) {
		if (err) throw err;	
	});
}

function emergency(data, consoleOut) {
	logIt(data,"EMERGENCY", consoleOut);
}
function alert(data, consoleOut) {
	logIt(data,"ALERT", consoleOut);
}
function critical(data, consoleOut) {
	logIt(data,"CRITICAL", consoleOut);
}
function error(data, consoleOut) {
	logIt(data,"ERROR", consoleOut);
}
function warning(data, consoleOut) {
	logIt(data,"WARNING", consoleOut);
}
function notice(data, consoleOut) {
	logIt(data,"NOTICE", consoleOut);
}
function info(data, consoleOut) {
	logIt(data,"INFO", consoleOut);
}
function debug(data, consoleOut) {
	logIt(data,"DEBUG", consoleOut);
}

/**
debug("Debugging haha hehe");
debug(' This is a debug message to help you figure out whats going on');

info('Just to inform you, everything is okay! no probs today');
info(' The processus has started successfully!',false);

notice('OMG! have you noticed what just happened ? ');
notice('This is a super notificaiton ? ');

warning(' Hum another thing went wrong...');
warning('Something went wrong...');

error('General Failure');
error('Error ooccurred while doing thus...');

critical('This is a critical messsage and require your whole attetion!',false);
critical('OMG! have you noticed what just happened ? ');

alert('FATAL ERROR!');
alert('DAMN FATAL ERROR!');

emergency('the system is going down!');
emergency('There is an emergency!');
**/

exports.init = init;

exports.emergency = emergency;
exports.alert = alert;
exports.critical = critical;
exports.error = error;
exports.warning = warning;
exports.notice = notice;
exports.info = info;
exports.debug = debug;

/**
 * 
Value	Severity	Keyword		Description														Examples
0		Emergency	emerg		System is unusable												This level should not be used by applications.
1		Alert		alert		Should be corrected immediately									Loss of the primary ISP connection.
2		Critical	crit		Critical conditions												A failure in the system's primary application.
3		Error		err			Error conditions												An application has exceeded its file storage limit and attempts to write are failing.
4		Warning		warning		May indicate that an error will occur if action is not taken.	A non-root file system has only 2GB remaining.
5		Notice		notice		Events that are unusual, but not error conditions.	
6		Informati..	info		Normal operational messages that require no action.				An application has started, paused or ended successfully.
7		Debug		debug		Information useful to developers for debugging the application.	

src https://en.wikipedia.org/wiki/Syslog
 */



/** http://momentjs.com/docs/#/displaying/ for date formats */