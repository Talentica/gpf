{"version":3,"sources":["sequelizeimp/sequelizeService.ts"],"names":[],"mappings":"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","file":"sequelizeimp/sequelizeService.js","sourcesContent":["import {config} from '../core/utils';\nimport * as Sequelize from \"sequelize\";\nimport Q = require('q');\nimport {IEntityService} from '../core/interfaces/entity-service';\nimport {MetaUtils} from \"../core/metadata/utils\";\nimport {pathRepoMap} from '../core/dynamic/model-entity';\nimport {QueryOptions} from '../core/interfaces/queryOptions';\n\n\nimport {Decorators as CoreDecorators} from '../core/constants';\n//import {pathRepoMap} from './schema';\nimport * as schema  from \"./schema\";\nimport * as Enumerable from 'linq';\n\nclass SequelizeService implements IEntityService {\n    private sequelize: any;\n    private _schemaCollection = {};\n    private _relationCollection = [];\n    constructor() {\n\n    }\n\n    init(force?: boolean): Promise<any> {\n        force = force || false;\n        return this.sequelize.sync({ force: force, logging: true });\n    }\n\n    connect() {\n        if (config().SqlConfig.isSqlEnabled == false)\n            return;\n        this.sequelize = new Sequelize(config().SqlConfig.database,\n            config().SqlConfig.username,\n            config().SqlConfig.password,\n            config().SqlConfig.sequlizeSetting);\n    }\n\n    getSqlContext(): any {\n        return this.sequelize;\n    }\n\n\n    getCustomResult(databaseName: string, query) {\n        if (config().SqlConfig.isSqlEnabled == false)\n            return;\n        var dynamicSequelize = new Sequelize(databaseName,\n            config().SqlConfig.username,\n            config().SqlConfig.password,\n            config().SqlConfig.sequlizeSetting);\n        return dynamicSequelize.query(query);   \n    }\n\n    addScheam(name: string, schema: any, detail: any) {\n        var newSchema = this.sequelize.define(name, schema, detail);\n        this._schemaCollection[name] = newSchema;\n        return newSchema;\n    }\n\n    addRelationInSchema(fromSchema: any, toSchema: any, relationType: string, relationName: string, path: string) {\n        if (relationType == CoreDecorators.ONETOMANY)\n            fromSchema.hasMany(toSchema, { as: path });\n        if (relationType == CoreDecorators.MANYTOONE)\n            fromSchema.belongsTo(toSchema, { as: path });\n        if (relationType == CoreDecorators.ONETOONE)\n            fromSchema.has(toSchema, { as: path });\n\n        let relationToDictionary: any = {};\n        relationToDictionary[\"relation\"] = relationName;\n        relationToDictionary.fromSchema = fromSchema;\n        relationToDictionary.toSchema = toSchema;\n        relationToDictionary.path = path;\n\n        this._relationCollection.push(relationToDictionary);\n    }\n\n    getModel(repoPath: string) {\n        try {\n            var schemaNamefromPathRepomap = pathRepoMap[repoPath].schemaName;\n            return this._schemaCollection[schemaNamefromPathRepomap];\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    bulkPost(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return this.getModel(repoPath).bulkCreate(objArr);\n    }\n\n    bulkPutMany(repoPath: string, objIds: Array<any>, obj: any): Q.Promise<any> {\n        return null;\n    }\n\n    bulkDel(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return this.getModel(repoPath).destroy({ where: { id: objArr } });\n    }\n\n    bulkPut(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return this.getModel(repoPath).bulkUpdate(objArr);\n    }\n\n    bulkPatch(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return this.getModel(repoPath).bulkUpdate(objArr);\n    }\n\n    findAll(repoPath: string): Q.Promise<any> {\n        return this.getModel(repoPath).findAll().then(result => {\n            if (!result) return null;\n            var finalOutput = Enumerable.from(result).select((x:any) => x.dataValues).toArray();// result.forEach(x => x.dataValues).toArray();\n            return finalOutput;\n        });\n    }\n\n    findWhere(repoPath: string, query, selectedFields?: Array<string>, queryOptions?: QueryOptions, toLoadChilds?: boolean): Q.Promise<any> {\n        return this.getModel(repoPath).findAll(query).then(result => {\n            return result.dataValues;\n        });\n    }\n\n    //This is not testest yet\n    //TODO: add test case for this\n    countWhere(repoPath: string, query): Q.Promise<any> {\n        return this.getModel(repoPath).findAndCountAll(query).then(result => {\n            return result;\n        });\n    }\n    \n\n    //This is not testest yet\n    //TODO: add test case for this\n    distinctWhere(repoPath: string, query): Q.Promise<any> {\n        if (!query) {\n            query = {};\n        }\n        query.distinct = true;\n        return this.getModel(repoPath).findAndCountAll(query).then(result => {\n            return result;\n        });\n    }\n\n    findOne(repoPath: string, id): Q.Promise<any> {\n\n        let schemaModel = this.getModel(repoPath);\n        let primaryKey = schemaModel.primaryKeyAttribute;\n        var cond = {};\n        cond[primaryKey] = id;\n        var self = this;\n        return schemaModel.find({ include: [{ all: true }], where: cond }).then(result => {\n            let model = result.dataValues;\n            self.getAssociationForSchema(result, schemaModel);\n            return result.dataValues;\n        }\n        );\n    }\n\n    findByField(repoPath: string, fieldName, value): Q.Promise<any> {\n        return this.getModel(repoPath).find({ where: { fieldName: value } });\n    }\n\n    findMany(repoPath: string, ids: Array<any>) {\n        return this.getModel(repoPath).findAll({ where: { id: ids } });\n    }\n\n    findChild(repoPath: string, id, prop): Q.Promise<any> {\n        return this.getModel(repoPath).find({\n            where: { id: id },\n            include: [\n                { model: this.getModel(prop), as: prop }\n            ]\n        }).then(\n            function (entity) {\n                return entity[prop];\n            });\n    }\n\n    /**\n     * case 1: all new - create main item and child separately and embed if true\n     * case 2: some new, some update - create main item and update/create child accordingly and embed if true\n     * @param obj\n     */\n    post(repoPath: string, obj: any): Q.Promise<any> {\n        return this.getModel(repoPath).create(obj);\n    }\n\n    put(repoPath: string, id: any, obj: any): Q.Promise<any> {\n        return this.getModel(repoPath).update(obj, { where: { id: id } });\n    }\n\n    del(repoPath: string, id: any): Q.Promise<any> {\n        return this.getModel(repoPath).destroy({ where: { id: id } });\n    }\n\n    patch(repoPath: string, id: any, obj): Q.Promise<any> {\n        return this.getModel(repoPath).update(obj, { where: { id: id } });\n    }\n\n    private getAssociationForSchema(model: any, schema: any) {\n        var asyncCalls = [];\n        Enumerable.from(this._relationCollection)\n            .where(relationSchema => relationSchema.fromSchema == schema).forEach(relation1 => {\n                model.dataValues[relation1.path] = model[relation1.toSchema.name + \"s\"];\n            });\n        //return Q.allSettled(asyncCalls).then(res => {\n        //    return model.dataValues;\n        //});\n    }\n\n}\nexport var sequelizeService = new SequelizeService();\n//export var connect = sequelizeService.connect;\n"],"sourceRoot":"/source/"}