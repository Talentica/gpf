{"version":3,"sources":["sequelizeimp/schema.ts"],"names":[],"mappings":"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","file":"sequelizeimp/schema.js","sourcesContent":["/// <reference path=\"../core/dynamic/dynamic-repository.ts\" />\nimport {DynamicSchema} from './dynamic-schema';\nimport {repositoryMap} from '../core/exports';\nimport * as Utils from '../core/utils';\nimport {MetaUtils} from '../core/metadata/utils';\nimport {Decorators as CoreDecorators} from '../core/constants';\nimport {Decorators} from './constants';\nimport {IEntityParams} from './decorators/interfaces/entity-params';\nimport {IRepositoryParams} from '../core/decorators/interfaces/repository-params';\nimport {pathRepoMap, updateModelEntity, getModel} from '../core/dynamic/model-entity';\nimport Mongoose = require('mongoose');\nimport * as Enumerable from 'linq';\nimport {sequelizeService} from './sequelizeService';\nimport {GetRepositoryForName} from '../core/dynamic/dynamic-repository';\n\nexport function generateSchema() {\n    if (Utils.config().SqlConfig.isSqlEnabled == false)\n        return;\n\n    // register entity service\n    Utils.entityService(Decorators.ENTITY, sequelizeService);\n\n    var entities = MetaUtils.getMetaDataForDecorators([CoreDecorators.ENTITY]);\n    var allDynamicSchemas: Array<DynamicSchema> = new Array<DynamicSchema>();\n    entities.forEach(x => {\n        let entityMeta = x.metadata[0];\n        let schemaName = (<IEntityParams>entityMeta.params).tableName;\n        let schema = new DynamicSchema(entityMeta.target, schemaName, <IEntityParams>entityMeta.params);\n        allDynamicSchemas.push(schema);\n        let entitySchema = schema.getSchema();\n        //let model = Mongoose.model(schemaName, <any>mongooseSchema);\n        updateModelEntity(schemaName, entityMeta.target, entitySchema, schema);\n    });\n\n    allDynamicSchemas.forEach(schema => {\n        schema.getRelations()[CoreDecorators.ONETOMANY].forEach(oneToManyRelation => {\n            let sourceDynamicSchema = schema;\n            let targetDynamicSchema = Enumerable.from(allDynamicSchemas)\n                .where(dynamicSchema => dynamicSchema.schemaName == oneToManyRelation.rel).first();\n            sequelizeService.addRelationInSchema(sourceDynamicSchema.getSchema(), targetDynamicSchema.getSchema(), CoreDecorators.ONETOMANY, oneToManyRelation.rel, oneToManyRelation.propertyKey);\n        });\n    })\n\n    allDynamicSchemas.forEach(schema => {\n        schema.getRelations()[CoreDecorators.MANYTOONE].forEach(manyToOne => {\n            let sourceDynamicSchema = schema;\n            let targetDynamicSchema = Enumerable.from(allDynamicSchemas)\n                .where(dynamicSchema => dynamicSchema.schemaName == manyToOne.rel).first();\n            sequelizeService.addRelationInSchema(sourceDynamicSchema.getSchema(), targetDynamicSchema.getSchema(), CoreDecorators.MANYTOONE, manyToOne.rel, manyToOne.propertyKey);\n\n        });\n    })\n\n\n    var repositoryMetadata = MetaUtils.getMetaDataForDecorators([CoreDecorators.REPOSITORY]);\n    repositoryMetadata.forEach(x => {\n        if (!x.metadata || !x.metadata.length) {\n            return;\n        }\n        let repositoryParams = <IRepositoryParams>x.metadata[0].params;\n        let entity = (<IRepositoryParams>x.metadata[0].params).model;\n        let meta = MetaUtils.getMetaData(entity, Decorators.ENTITY);\n        if (meta.length > 0) {\n            let entityMeta = meta[0];\n            if (entityMeta) {\n                let schemaName = (<IEntityParams>entityMeta.params).tableName;\n                pathRepoMap[repositoryParams.path] = { schemaName: schemaName, modelType: Decorators.ENTITY };\n            }\n        }\n    });\n    sequelizeService.init();\n   \n}\n    // need to pass this via reference\n//    var visitedNodes = new Map();\n\n//    export function validateModels() {\n//    var modelsMeta = metaUtils.getMetaDataForDecoratorInAllTargets(Decorators.DOCUMENT);\n//    Enumerable.from(modelsMeta).forEach(x => {\n//        var m: MetaData = x;\n//        var res = this.hasLoop(m.target, new Array<MetaData>());\n//        if (res) {\n//            throw 'Cannot start server. Please correct the model ' + m.target.constructor.name;\n//        }\n//    });\n//}\n\n//    private function hasLoop(target: Object, vis: Array<MetaData>): boolean {\n//        var rel = metaUtils.getAllRelationsForTargetInternal(target);\n//        Enumerable.from(rel).forEach(y => {\n//            var r: MetaData = <MetaData>y;\n//            var param: IAssociationParams = <IAssociationParams>r.params;\n//            if (param.embedded || param.eagerLoading) {\n//                var res = false;\n//                if (this.visitedNodes.has(r)) {\n//                    // no need to go ahead, path from this node is already checked\n//                    res = false;\n//                }\n//                else if (vis.indexOf(r) > -1) {\n//                    // loop found\n//                    res = true;\n//                }\n//                else {\n//                    vis.push(r);\n//                    this.visitedNodes.set(r, true);\n//                    res = this.hasLoop(param.itemType, vis);\n//                }\n\n//                // if any loop \n//                if (res)\n//                    return true;\n//            }\n//        });\n\n//        return false;\n//    }"],"sourceRoot":"/source/"}