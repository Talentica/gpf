{"version":3,"sources":["mongoose/mongooseSchemaGenerator.ts"],"names":[],"mappings":";AAAA,MAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AAEtC,qCAA0B,8BAA8B,CAAC,CAAA;AACzD,IAAI,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC;AAQrC;IACI,YAAY,CAAC,YAAiB,EAAE,eAAuC;QACnE,IAAI,iBAAiB,GAAG,IAAI,cAAc,CAAC,YAAY,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;QAClF,EAAE,CAAC,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;YAC9B,gCAAW,CAAC,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;QAC9D,CAAC;QACD,MAAM,CAAC,iBAAiB,CAAC;IAC7B,CAAC;AACL,CAAC;AAEU,uBAAe,GAAG,IAAI,sBAAsB,EAAE,CAAC","file":"mongoose/mongooseSchemaGenerator.js","sourcesContent":["import Mongoose = require('mongoose');\nimport * as Utils from \"../core/metadata/utils\";\nimport {searchUtils} from \"../search/elasticSearchUtils\";\nvar MongooseSchema = Mongoose.Schema;\n\n\nexport interface IMongooseSchemaOptions {\n    options: Object,\n    searchIndex: boolean;\n}\n\nclass MongooseSchemaGenrator {\n    createSchema(parsedSchema: any, mongooseOptions: IMongooseSchemaOptions): Object {\n        var mongooseSchemaObj = new MongooseSchema(parsedSchema, mongooseOptions.options);\n        if (mongooseOptions.searchIndex) {\n            searchUtils.insertMongoosasticToSchema(mongooseSchemaObj);\n        }\n        return mongooseSchemaObj;\n    }\n}\n\nexport var schemaGenerator = new MongooseSchemaGenrator();"],"sourceRoot":"/source/"}