{"version":3,"sources":["mongoose/mongoose-service.ts"],"names":[],"mappings":"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","file":"mongoose/mongoose-service.js","sourcesContent":["import Q = require('q');\nimport {IEntityService} from '../core/interfaces/entity-service';\nimport {MetaUtils} from \"../core/metadata/utils\";\nimport * as MongooseModel from './mongoose-model';\nimport {pathRepoMap, getModel} from '../core/dynamic/model-entity';\nimport {winstonLog} from '../logging/winstonLog';\nimport * as Utils from './utils';\nimport {QueryOptions} from '../core/interfaces/queryOptions';\n\nexport class MongooseService implements IEntityService {\n\n    constructor() {\n    }\n\n    bulkPost(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return MongooseModel.bulkPost(this.getModel(repoPath), objArr);\n    }\n\n\n    bulkDel(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return MongooseModel.bulkDel(this.getModel(repoPath), objArr);\n    }\n\n    bulkPut(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return MongooseModel.bulkPut(this.getModel(repoPath), objArr);\n    }\n\n    bulkPatch(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return MongooseModel.bulkPatch(this.getModel(repoPath), objArr);\n    }\n\n    bulkPutMany(repoPath: string, objIds: Array<any>, obj: any): Q.Promise<any> {\n        return MongooseModel.bulkPutMany(this.getModel(repoPath), objIds, obj);\n    }\n\n    findAll(repoPath: string): Q.Promise<any> {\n        return MongooseModel.findAll(this.getModel(repoPath));\n    }\n\n    findWhere(repoPath: string, query, selectedFields?: Array<string> | any, queryOptions?: QueryOptions, toLoadChilds?: boolean): Q.Promise<any> {\n        return MongooseModel.findWhere(this.getModel(repoPath), query, selectedFields, queryOptions, toLoadChilds);\n    }\n\n    countWhere(repoPath: string, query): Q.Promise<any> {\n        return MongooseModel.countWhere(this.getModel(repoPath), query);\n    }\n\n    distinctWhere(repoPath: string, query): Q.Promise<any> {\n        return MongooseModel.countWhere(this.getModel(repoPath), query);\n    }\n\n    findOne(repoPath: string, id): Q.Promise<any> {\n        return MongooseModel.findOne(this.getModel(repoPath), id);\n    }\n\n    findByField(repoPath: string, fieldName, value): Q.Promise<any> {\n        return MongooseModel.findByField(this.getModel(repoPath), fieldName, value);\n    }\n\n    findMany(repoPath: string, ids: Array<any>,toLoadEmbeddedChilds?: boolean) {\n        return MongooseModel.findMany(this.getModel(repoPath), ids,toLoadEmbeddedChilds);\n    }\n\n    findChild(repoPath: string, id, prop): Q.Promise<any> {\n        return MongooseModel.findChild(this.getModel(repoPath), id, prop);\n    }\n\n    /**\n     * case 1: all new - create main item and child separately and embed if true\n     * case 2: some new, some update - create main item and update/create child accordingly and embed if true\n     * @param obj\n     */\n    post(repoPath: string, obj: any): Q.Promise<any> {\n        return MongooseModel.post(this.getModel(repoPath), obj);\n    }\n\n    put(repoPath: string, id: any, obj: any): Q.Promise<any> {\n        return MongooseModel.put(this.getModel(repoPath), id, obj,repoPath);\n    }\n\n    del(repoPath: string, id: any): Q.Promise<any> {\n        return MongooseModel.del(this.getModel(repoPath), id);\n    }\n\n    patch(repoPath: string, id: any, obj): Q.Promise<any> {\n        return MongooseModel.patch(this.getModel(repoPath), id, obj,repoPath);\n    }\n\n    getModel(repoPath: string) {\n        try {\n            return Utils.getCurrentDBModel(pathRepoMap[repoPath].schemaName);\n        } catch (e) {\n            winstonLog.logError(`Error in getMongooseModel ${e}`);\n            throw e;\n        }\n    }\n}"],"sourceRoot":"/source/"}