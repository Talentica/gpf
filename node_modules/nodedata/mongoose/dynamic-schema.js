"use strict";
const Mongoose = require('mongoose');
//import aa = require('mongoose');
const Enumerable = require('linq');
const document_strict_1 = require('./enums/document-strict');
const decorators_1 = require('../core/constants/decorators');
const mongooseSchemaGenerator_1 = require("./mongooseSchemaGenerator");
const decorator_type_1 = require('../core/enums/decorator-type');
const utils_1 = require("../core/metadata/utils");
class DynamicSchema {
    constructor(target, name) {
        this.target = target;
        this.schemaName = name;
        this.parsedSchema = this.parse(target);
    }
    getSchema() {
        var fieldMetaArr = utils_1.MetaUtils.getMetaData(this.target, decorators_1.Decorators.FIELD);
        var idx = Enumerable.from(fieldMetaArr)
            .where((keyVal) => keyVal && keyVal.params && (keyVal.params).searchIndex).any();
        var options = this.getMongooseOptions(this.target);
        var mongooseOptions = { options: options, searchIndex: idx };
        return mongooseSchemaGenerator_1.schemaGenerator.createSchema(this.parsedSchema, mongooseOptions);
    }
    parse(target) {
        if (!target || !(target instanceof Object)) {
            throw TypeError;
        }
        var schema = {};
        var primaryKeyProp;
        var metaDataMap = this.getAllMetadataForSchema(target);
        for (var field in metaDataMap) {
            // Skip autogenerated primary column
            //if (prop === primaryKeyProp) {
            //    continue;
            //}
            var fieldMetadata = metaDataMap[field];
            if (fieldMetadata.params && fieldMetadata.params.autogenerated) {
                continue;
            }
            if (fieldMetadata.decoratorType !== decorator_type_1.DecoratorType.PROPERTY) {
                continue;
            }
            if (fieldMetadata.params && fieldMetadata.params.searchIndex) {
                schema[field] = this.getSearchSchemaTypeForParam(fieldMetadata);
            }
            else {
                schema[field] = this.getSchemaTypeForParam(fieldMetadata);
            }
        }
        return schema;
    }
    getSearchSchemaTypeForParam(fieldMetadata) {
        var schemaType = this.getSchemaTypeForType(fieldMetadata.getType());
        if (fieldMetadata.params && fieldMetadata.params.rel) {
            return fieldMetadata.propertyType.isArray ? [schemaType] : schemaType;
        }
        else {
            return fieldMetadata.propertyType.isArray ? [schemaType] : { type: schemaType, es_indexed: true };
        }
        //var schemaType = this.getSchemaTypeForType(paramType);
        //if (paramType.rel) {
        //    //var metaData = Utils.getPrimaryKeyMetadata(paramType.itemType);
        //    //var relSchema;
        //    //if ((<any>fieldMetadata.params).embedded) {
        //    //    schema[field] = paramType.isArray ? [Types.Mixed] : Mongoose.Schema.Types.Mixed;
        //    //} else {
        //    //    relSchema = { ref: paramType.rel, type: Mongoose.Schema.Types.ObjectId };
        //    //    schema[field] = paramType.isArray ? [relSchema] : relSchema;
        //    //}
        //    // need to handle embedding vs foreign key refs
        //    return paramType.isArray ? [schemaType] : schemaType;
        //}
        //return paramType.isArray ? [schemaType] : {type : schemaType, es_indexed : true};
    }
    getSchemaTypeForParam(fieldMetadata) {
        var schemaType = this.getSchemaTypeForType(fieldMetadata.getType());
        return fieldMetadata.propertyType.isArray ? [schemaType] : schemaType;
        //var schemaType = this.getSchemaTypeForType(paramType.itemType);
        //if (paramType.rel) {
        //    //var metaData = Utils.getPrimaryKeyMetadata(paramType.itemType);
        //    //var relSchema;
        //    //if ((<any>fieldMetadata.params).embedded) {
        //    //    schema[field] = paramType.isArray ? [Types.Mixed] : Mongoose.Schema.Types.Mixed;
        //    //} else {
        //    //    relSchema = { ref: paramType.rel, type: Mongoose.Schema.Types.ObjectId };
        //    //    schema[field] = paramType.isArray ? [relSchema] : relSchema;
        //    //}
        //    // need to handle embedding vs foreign key refs
        //    return paramType.isArray ? [schemaType] : schemaType;
        //}
        //return paramType.isArray ? [schemaType] : schemaType;
    }
    getSchemaTypeForType(type) {
        switch (type) {
            case Mongoose.Types.ObjectId: return Mongoose.Schema.Types.ObjectId;
            case String: return String;
            case Number: return Number;
            case Buffer: return Buffer;
            case Date: return Date;
            case Boolean: return Boolean;
            case Array: return Array;
            //case undefined: return Mongoose.Schema.Types.Mixed;
            // any or no types
            case Object:
            default: return Mongoose.Schema.Types.Mixed;
        }
    }
    getMongooseOptions(target) {
        var meta = utils_1.MetaUtils.getMetaData(target, decorators_1.Decorators.DOCUMENT);
        var documentMeta = meta[0];
        var options = {};
        var params = (documentMeta.params || {});
        switch (params.strict) {
            case document_strict_1.Strict.true:
                options.strict = true;
                break;
            case document_strict_1.Strict.false:
                options.strict = false;
                break;
            case document_strict_1.Strict.throw:
                options.strict = "throw";
                break;
            default:
                options.strict = true;
                break;
        }
        return options;
    }
    isSchemaDecorator(decorator) {
        return decorator === decorators_1.Decorators.FIELD || decorator === decorators_1.Decorators.ONETOMANY || decorator === decorators_1.Decorators.MANYTOONE || decorator === decorators_1.Decorators.MANYTOMANY || decorator === decorators_1.Decorators.ONETOONE;
    }
    getAllMetadataForSchema(target) {
        var metaDataMap = utils_1.MetaUtils.getMetaData(target);
        var metaDataMapFiltered = {};
        for (var i in metaDataMap) {
            var meta = metaDataMap[i];
            if (!this.isSchemaDecorator(meta.decorator))
                continue;
            if (metaDataMapFiltered[meta.propertyKey])
                throw "A property cannot have more than one schema decorator";
            metaDataMapFiltered[meta.propertyKey] = meta;
        }
        return metaDataMapFiltered;
    }
}
exports.DynamicSchema = DynamicSchema;

//# sourceMappingURL=dynamic-schema.js.map
