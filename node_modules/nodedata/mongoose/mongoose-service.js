"use strict";
const MongooseModel = require('./mongoose-model');
const model_entity_1 = require('../core/dynamic/model-entity');
const winstonLog_1 = require('../logging/winstonLog');
const Utils = require('./utils');
class MongooseService {
    constructor() {
    }
    bulkPost(repoPath, objArr) {
        return MongooseModel.bulkPost(this.getModel(repoPath), objArr);
    }
    bulkDel(repoPath, objArr) {
        return MongooseModel.bulkDel(this.getModel(repoPath), objArr);
    }
    bulkPut(repoPath, objArr) {
        return MongooseModel.bulkPut(this.getModel(repoPath), objArr);
    }
    bulkPatch(repoPath, objArr) {
        return MongooseModel.bulkPatch(this.getModel(repoPath), objArr);
    }
    bulkPutMany(repoPath, objIds, obj) {
        return MongooseModel.bulkPutMany(this.getModel(repoPath), objIds, obj);
    }
    findAll(repoPath) {
        return MongooseModel.findAll(this.getModel(repoPath));
    }
    findWhere(repoPath, query, selectedFields, queryOptions, toLoadChilds) {
        return MongooseModel.findWhere(this.getModel(repoPath), query, selectedFields, queryOptions, toLoadChilds);
    }
    countWhere(repoPath, query) {
        return MongooseModel.countWhere(this.getModel(repoPath), query);
    }
    distinctWhere(repoPath, query) {
        return MongooseModel.countWhere(this.getModel(repoPath), query);
    }
    findOne(repoPath, id) {
        return MongooseModel.findOne(this.getModel(repoPath), id);
    }
    findByField(repoPath, fieldName, value) {
        return MongooseModel.findByField(this.getModel(repoPath), fieldName, value);
    }
    findMany(repoPath, ids, toLoadEmbeddedChilds) {
        return MongooseModel.findMany(this.getModel(repoPath), ids, toLoadEmbeddedChilds);
    }
    findChild(repoPath, id, prop) {
        return MongooseModel.findChild(this.getModel(repoPath), id, prop);
    }
    /**
     * case 1: all new - create main item and child separately and embed if true
     * case 2: some new, some update - create main item and update/create child accordingly and embed if true
     * @param obj
     */
    post(repoPath, obj) {
        return MongooseModel.post(this.getModel(repoPath), obj);
    }
    put(repoPath, id, obj) {
        return MongooseModel.put(this.getModel(repoPath), id, obj, repoPath);
    }
    del(repoPath, id) {
        return MongooseModel.del(this.getModel(repoPath), id);
    }
    patch(repoPath, id, obj) {
        return MongooseModel.patch(this.getModel(repoPath), id, obj, repoPath);
    }
    getModel(repoPath) {
        try {
            return Utils.getCurrentDBModel(model_entity_1.pathRepoMap[repoPath].schemaName);
        }
        catch (e) {
            winstonLog_1.winstonLog.logError(`Error in getMongooseModel ${e}`);
            throw e;
        }
    }
}
exports.MongooseService = MongooseService;

//# sourceMappingURL=mongoose-service.js.map
