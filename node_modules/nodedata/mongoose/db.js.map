{"version":3,"sources":["mongoose/db.ts"],"names":[],"mappings":"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","file":"mongoose/db.js","sourcesContent":["import Mongoose = require(\"mongoose\");\nimport * as CoreUtils from '../core/utils';\nimport {winstonLog} from '../logging/winstonLog';\nimport {PrincipalContext} from '../security/auth/principalContext';\nimport Q = require('q');\n// use main connection for pooling source\nexport var mainConnection: any = {};\nvar allConnections: any = {};\nvar connectionOptions;\n\nexport function connect() {\n    let dbLoc = CoreUtils.config().Config.DbConnection;\n    connectionOptions = CoreUtils.config().Config.DbConnectionOptions || {};\n    getConnection(dbLoc, connectionOptions);\n    mainConnection = allConnections[dbLoc];\n}\n\nexport function getDbSpecifcModel(schemaName: any, schema: any): any {\n    var database = PrincipalContext.get(CoreUtils.resources.userDatabase);\n    if (database && allConnections[database]) {\n        return allConnections[database].model(schemaName, schema);\n    }\n    else {\n        return mainConnection.model(schemaName, schema);\n    }\n}\n\nexport function updateConnection(connectionString, connectionOption): Q.IPromise<any> {\n    PrincipalContext.save(CoreUtils.resources.userDatabase, connectionString);\n    return getConnection(connectionString, connectionOption);\n}\n\nfunction getConnection(connectionString, connectionOption): Q.IPromise<any> {\n    if (!connectionString)\n        return Q.when(false);\n\n    if (!allConnections[connectionString]) {\n        var conn = Mongoose.createConnection(connectionString, connectionOption);\n        allConnections[connectionString] = conn;\n        return connectDataBase(conn, connectionString);\n    }\n    else {\n        return Q.when(true);\n    }\n}\n\nfunction connectDataBase(conn, connectionString): Q.IPromise<any> {\n    let defer = Q.defer();\n    conn.on('connecting', () => {\n        winstonLog.logInfo(`trying to establish connection for ${connectionString}`);\n    });\n\n    conn.on('connected', () => {\n        winstonLog.logInfo(`connection established successfully ${connectionString}`);\n        defer.resolve(true);\n    });\n\n    conn.on('error', (err) => {\n        winstonLog.logInfo(`connection to mongo failed for ${connectionString} with error ${err}`);\n        defer.resolve(false);\n    });\n\n    conn.on('disconnected', () => {\n        winstonLog.logInfo(`connection closed successfully ${connectionString}`);\n        defer.resolve(false);\n    });\n    return defer.promise;\n}"],"sourceRoot":"/source/"}