{"version":3,"sources":["tests/repositories/userRepository.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAAyB,uBAAuB,CAAC,CAAA;AACjD,4BAAwB,qBAAqB,CAAC,CAAA;AAC9C,qCAAgC,uCAAuC,CAAC,CAAA;AACxE,4BAAwB,iCAAiC,CAAC,CAAA;AAC1D,+BAA2B,oCAAoC,CAAC,CAAA;AAChE,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AAGrB,kDAA4C,sCAAiB;IAEzD,mCAAmC;IACnC,6HAA6H;IAC7H,OAAO;QACH,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,YAAY;IACZ,CAAC;IAED,kBAAkB,CAAC,IAAS;QACxB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,oCAAoC;IACxC,CAAC;IAED,OAAO,CAAC,IAAI;QACR,MAAM,CAAC,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC;IAC/B,CAAC;IAID,SAAS,CAAC,IAAY,EAAE,GAAW,EAAE,IAAS;QAC1C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAGD,UAAU,CAAC,IAAa;QACpB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAGM,WAAW,CAAC,SAAS,EAAE,KAAK;QAC/B,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;AAEL,CAAC;AAhBG;IAAC,qBAAS,CAAC,EAAE,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;IAChC,2BAAY,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC;;;;+CAAA;AAKvE;IAAC,2BAAY,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,mBAAmB,EAAE,CAAC;;;;gDAAA;AAKjF;IAAC,qBAAS,CAAC,EAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAC,CAAC;;;;iDAAA;AAhCnC;IAAC,uBAAU,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,qBAAS,EAAE,CAAC;;kBAAA;AAChD;gCAoCC,CAAA","file":"tests/repositories/userRepository.js","sourcesContent":["import {repository} from \"../../core/decorators\";\nimport {UserModel} from '../models/usermodel';\nimport {DynamicRepository} from '../../core/dynamic/dynamic-repository';\nimport {authorize} from '../../core/decorators/authorize';\nimport {preauthorize} from '../../core/decorators/preauthorize';\nvar Q = require('q');\n\n@repository({ path: 'users', model: UserModel })\nexport default class UserRepository extends DynamicRepository {\n\n    //@authorize({ roles: ['ROLE_A'] })\n    //@preauthorize({ serviceName: \"preauthservice\", methodName: \"CanEditWithParams\", params: { id: '#id', entity: '#entity' } })\n    findAll(): Q.Promise<any> {\n        return super.findAll();\n    }\n\n    doFindByName() {\n    }\n\n    doFindByNameAndAge(name: any): Q.Promise<any> {\n        return Q.when(name);\n        //return Q.fcall(this.getCaps(name);\n    }\n\n    getCaps(name): string {\n        return name + '   ' + name;\n    }\n\n    @authorize({ roles: ['ROLE_A'] })\n    @preauthorize({ serviceName: \"preauthservice\", methodName: \"CanEdit\" })// params: { id: '#id', entity: '#entity' } })\n    doProcess(name: string, nam: string, type: any) {\n        return type;\n    }\n\n    @preauthorize({ serviceName: \"preauthservice\", methodName: \"CanEditWithParams\" })// params: { id: '#id', entity: '#entity', other: [false] } })\n    doProcess1(name: boolean) {\n        return name;\n    }\n\n    @authorize({roles: ['ROLE_A']})\n    public findByField(fieldName, value): Q.Promise<any> {\n        return super.findByField(fieldName, value);\n    }\n\n}\n"],"sourceRoot":"/source/"}