{"version":3,"sources":["tests/repositories/subjectRepository.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAAyC,uBAAuB,CAAC,CAAA;AACjE,0BAAsB,mBAAmB,CAAC,CAAA;AAC1C,qCAAgC,uCAAuC,CAAC,CAAA;AAExE,+BAA2B,oCAAoC,CAAC,CAAA;AAChE,6BAAyB,kCAAkC,CAAC,CAAA;AAG5D,sDAA8C,sCAAiB;IAE3D,mCAAmC;IACnC,0EAA0E;IAG1E,OAAO;QACH,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAGD,SAAS,CAAC,EAAO,EAAE,GAAQ;QACvB,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAIM,WAAW,CAAC,SAAS,EAAE,KAAK;QAC/B,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;AACL,CAAC;AAhBG;IAAC,2BAAY,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC;IAAA,+DAA+D;IACrI,2BAAc,EAAE;;;;+CAAA;AAKjB;IAAC,2BAAY,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;;;;iDAAA;AAKxE;IAAC,2BAAY,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;IACvE,uBAAU,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC;;;;mDAAA;AAjB5E;IAAC,uBAAU,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAO,EAAE,CAAC;;oBAAA;AAChD;kCAoBC,CAAA","file":"tests/repositories/subjectRepository.js","sourcesContent":["import {repository, allowanonymous} from \"../../core/decorators\";\nimport {subject} from '../models/subject';\nimport {DynamicRepository} from '../../core/dynamic/dynamic-repository';\nimport {authorize} from '../../core/decorators/authorize';\nimport {preauthorize} from '../../core/decorators/preauthorize';\nimport {postfilter} from '../../core/decorators/postfilter';\n\n@repository({ path: 'subject', model: subject })\nexport default class CourseRepository extends DynamicRepository {\n\n    //@authorize({ roles: ['ROLE_A'] })\n    //@postfilter({ serviceName: \"preauthservice\", methodName: \"PostFilter\" })\n    @preauthorize({ serviceName: \"preauthservice\", methodName: \"CanEdit\" })//, params: { id: '#id', entity: '#entity', other: [false] } })\n    @allowanonymous()\n    findAll(): Q.Promise<any> {\n        return super.findAll();\n    }\n\n    @preauthorize({ serviceName: \"preauthservice\", methodName: \"CanEdit1\" })\n    doProcess(id: any, val: any) {\n        return 'success';\n    }\n\n    @preauthorize({ serviceName: \"preauthservice\", methodName: \"CanEdit1\" })\n    @postfilter({ serviceName: \"preauthservice\", methodName: \"PostFilter\" })\n    public findByField(fieldName, value): Q.Promise<any> {\n        return super.findByField(fieldName, value);\n    }\n}\n"],"sourceRoot":"/source/"}