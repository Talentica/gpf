"use strict";
const user_repository_mock_1 = require('../../unit-test/repository/user-repository-mock');
const user_1 = require('../../security/auth/user');
class MockAuthService {
    constructor() {
        this.mockRepo = new user_repository_mock_1.UserRepositoryMock();
    }
    authenticate() {
        console.log('mock service message');
    }
    loadUserByUsername(userName) {
        var userDetail;
        return this.mockRepo.findByField("name", "a").then((user) => {
            userDetail = new user_1.User(user.name, user.password, user);
            return userDetail;
        });
    }
    ;
    loadUserById(id) {
        var userDetail;
        return this.mockRepo.findByField("name", "a").then((user) => {
            userDetail = new user_1.User(user.name, user.password, user);
            return userDetail;
        });
    }
    ;
    loadUserByField(field, value) {
        var userDetail;
        return this.mockRepo.findByField("name", "a").then((user) => {
            userDetail = new user_1.User(user.name, user.password, user);
            return userDetail;
        });
    }
    ;
    createNewUser(userObject) {
        var userDetail;
        return this.mockRepo.findByField("name", "a").then((user) => {
            userDetail = new user_1.User(user.name, user.password, user);
            return userDetail;
        });
    }
    ;
    updateExistingUser(id, userObject) {
        var userDetail;
        return this.mockRepo.findByField("name", "a").then((user) => {
            userDetail = new user_1.User(user.name, user.password, user);
            return userDetail;
        });
    }
    ;
}
exports.MockAuthService = MockAuthService;
//# sourceMappingURL=MockService.js.map