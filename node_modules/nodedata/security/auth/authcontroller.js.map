{"version":3,"sources":["security/auth/authcontroller.ts"],"names":[],"mappings":"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","file":"security/auth/authcontroller.js","sourcesContent":["/// <reference path=\"security-utils.ts\" />\nvar express = require('express');\n//import UserRepository from '../repositories/userRepository';\nimport * as configUtil from '../../core/utils';\nvar crypto = require('crypto');\n//Passport\nvar passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\nvar FacebookStrategy = require('passport-facebook').Strategy;\n\nvar jwt = require('jsonwebtoken');\nimport {router} from '../../core/exports';\n\nimport {inject, injectbyname} from '../../di/decorators/inject';\n\nimport {Container} from '../../di';\nimport {AuthService} from './auth-service';\nimport * as Utils from '../../core/utils';\n\nimport * as securityUtils from './security-utils';\nimport {UserDetailService} from './user-detail-service';\n\nexport class AuthController {\n\n    private path: string;\n\n    @inject()\n    private authService: AuthService;\n\n    @injectbyname(\"UserDetailService\")\n    private userDetailService: UserDetailService;\n\n    constructor(path: string) {\n        this.path = path;\n        this.addRoutes();\n        this.createAuthStrategy();\n    }\n\n    private createAuthStrategy() {\n        this.authService.authenticate();\n    }\n\n    private getFullBaseUrl(req): string {\n        var fullbaseUr: string = \"\";\n        fullbaseUr = this.getProtocol(req) + '://' + req.get('host') + req.originalUrl;\n        return fullbaseUr;\n    }\n\n    private addRoutes() {\n        router.get('/',\n            securityUtils.ensureLoggedIn(),\n            (req, res) => {\n                var aa = this.authService;\n                // Display the Login page with any flash message, if any\n                res.render('home', { user: req.user });\n            });\n\n        router.get('/' + configUtil.config().Config.basePath,\n            securityUtils.ensureLoggedIn(),\n            (req, res) => {\n                //fetch all resources name (not the model name) in an array\n                var allresourcesNames: Array<string> = Utils.getAllResourceNames();\n                var allresourceJson = [];\n                var fullbaseUrl: string = \"\";\n                fullbaseUrl = this.getFullBaseUrl(req);\n                allresourcesNames.forEach(resource => {\n                    var resoucejson = {};\n                    resoucejson[resource] = fullbaseUrl + (resource[0] === '/' ? resource : '/' + resource);//+ tokenUrl;\n                    allresourceJson.push(resoucejson);\n                });\n                //loop through rsources and push in json array with name as key and url as value\n                res.set(\"Content-Type\", \"application/json\");\n\n                res.send(JSON.stringify(allresourceJson, null, 4));\n            }\n        )\n\n        router.get('/login',\n            (req, res) => {\n                res.render('login');\n            });\n        router.get('/authlogin',\n            (req, res) => {\n                res.render('authlogin');\n            });\n        if (configUtil.config().Security.authenticationType === configUtil.securityConfig().AuthenticationType[configUtil.securityConfig().AuthenticationType.TokenBased]) {\n            router.post('/login',\n                passport.authenticate(\"local\",\n                    {\n                        session: false\n                    }), (req, res, next) => this.serialize(req, res, next),\n                (req, res, next) => this.generateToken(req, res, next),\n                (req, res, next) => this.generateRefreshToken(req, res, next),\n                (req, res) => this.authRespond(req, res));\n        }\n\n        if (configUtil.config().Security.authenticationType === configUtil.securityConfig().AuthenticationType[configUtil.securityConfig().AuthenticationType.TokenBased]) {\n            router.post('/authlogin',\n                passport.authenticate(\"local\",\n                    {\n                        session: false\n                    }), (req, res, next) => this.serialize(req, res, next),\n                (req, res, next) => this.generateToken(req, res, next),\n                (req, res, next) => this.generateRefreshToken(req, res, next),\n                (req, res) => this.authRespond(req, res));\n        }\n\n        router.get('/token', (req, res, next) => this.validateRefreshToken(req, res, next),\n            (req, res, next) => this.serialize(req, res, next),\n            (req, res, next) => this.generateToken(req, res, next),\n            (req, res) => this.authRespond(req, res));\n\n        if (configUtil.config().Security.authenticationType === configUtil.securityConfig().AuthenticationType[configUtil.securityConfig().AuthenticationType.passwordBased]) {\n            router.post('/login',\n                passport.authenticate(\"local\"), (req, res) => {\n                    res.redirect('/' + Utils.config().Config.basePath);\n                });\n        }\n        router.get('/logout', (req, res) => {\n            req.logout();\n            res.redirect('/');\n        });\n\n        router.post('/register', (req, res) => {\n            this.userDetailService.getNewUser(req, res);\n        });\n    }\n\n    serialize(req, res, next) {\n        this.db.updateOrCreate(req.user, function (err, user) {\n            if (err) { return next(err); }\n            // we store the updated information in req.user again\n            req.user = {\n                id: user._id\n            };\n            next();\n        });\n    }\n\n    db = {\n        updateOrCreate: function (user, cb) {\n            // we just cb the user\n            cb(null, user);\n        }\n    };\n\n    private generateToken(req, res, next) {\n        req.token = jwt.sign(\n            req.user\n            , configUtil.securityConfig().SecurityConfig.tokenSecretkey, {\n                expiresInMinutes: configUtil.securityConfig().SecurityConfig.tokenExpiresInMinutes\n            });\n        //TODO dont put it in user object in db\n        req.user.accessToken = req.token;\n        res.cookie('authorization', req.token, { maxAge: 900000, httpOnly: true });\n        this.userDetailService.updateExistingUser(req.user.id, req.user).then(\n            (user) => {\n                req.user = user.getUserObject();\n                next();\n            },\n            (error) => {\n                return error;\n            });\n    }\n\n    private respond(req, res) {\n        res.redirect('/data/');\n    }\n\n    private authRespond(req, res) {\n        var responseJson = {};\n        delete req.user.password;\n        responseJson['user'] = req.user;\n        res.send(responseJson);\n    }\n\n    private generateRefreshToken(req, res, next) {\n        req.user.refreshToken = req.user.id.toString() + '.' + crypto.randomBytes(40).toString('hex');\n        //TODO dont put it in user object in db\n        res.cookie('refreshToken', req.user.refreshToken, { maxAge: 900000, httpOnly: true });\n        this.userDetailService.updateExistingUser(req.user.id, req.user).then(\n            (user) => {\n                req.user = user.getUserObject();\n                next();\n            },\n            (error) => {\n                return error;\n            });\n    }\n\n    private validateRefreshToken(req, res, next) {\n        this.userDetailService.loadUserByField(\"refreshToken\", req.cookies.refreshToken).then(\n            (user) => {\n                req.user = user.getUserObject();\n                next();\n            },\n            (error) => {\n                return error;\n            });\n    }\n\n    private getProtocol(req) : string{\n        if(req.headers && req.headers[\"x-arr-ssl\"]){\n            return \"https\";\n        }\n        else{\n            return req.protocol;\n        }\n    }\n}"],"sourceRoot":"/source/"}