{"version":3,"sources":["security/auth/auth-service.ts"],"names":[],"mappings":"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","file":"security/auth/auth-service.js","sourcesContent":["import * as configUtil from '../../core/utils';\n\nvar passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\nvar FacebookStrategy = require('passport-facebook').Strategy;\nimport {service} from '../../di/decorators/service';\n\nimport {DynamicRepository} from '../../core/dynamic/dynamic-repository';\nimport {inject, injectbyname} from '../../di/decorators/inject';\nimport UserRepository from '../../tests/repositories/userRepository';\nimport {UserDetailService} from './user-detail-service';\nimport {router} from '../../core/exports';\nvar bcryptNodejs = require(\"bcrypt-nodejs\");\n\n@service()\nexport class AuthService {\n\n    @injectbyname(\"UserDetailService\")\n    private userDetailService: UserDetailService;\n\n    constructor() {\n        if (configUtil.config().Security.useFaceBookAuth == true) {\n            this.addRoutes();\n        }\n    }\n\n    authenticate() {\n        this.authenticateByPasswordorToken();\n        if (configUtil.config().Security.useFaceBookAuth == true) {\n            this.facebookAuthentication();\n        }\n    }\n\n    private authenticateByPasswordorToken() {\n        passport.use(new LocalStrategy(\n            (username, password, done) => {\n                this.userDetailService.loadUserByUsername(username).then(\n                    (user) => {\n                        if (!user) {\n                            return done(null, false, { message: 'Incorrect username.' });\n                        }\n                        try {\n                            if (!bcryptNodejs.compareSync(password, user.getPassword())) {\n                                return done(null, false, { message: 'Incorrect password.' });\n                            }\n                        } catch (error){\n                            return done(null, false, { message: 'Incorrect password.' });\n                        }\n\n                        return done(null, user.getUserObject());\n\n                    },\n                    (error) => {\n                        return done(error);\n                    });\n\n            }\n\n        ));\n        // this.serializeDeserialize();\n\n\n    }\n\n    private serializeDeserialize() {\n        passport.serializeUser((user, cb) => {\n            cb(null, user._id);\n        });\n\n\n        passport.deserializeUser((id, cb) => {\n            this.userDetailService.loadUserById(id).\n                then(\n                (user) => {\n                    cb(null, user.getUserObject());\n                },\n                (err) => {\n                    return cb(err);\n                }\n                );\n\n        });\n    }\n\n    private facebookAuthentication() {\n        passport.use(new FacebookStrategy({\n\n            // pull in our app id and secret from our Config.ts file\n            clientID: configUtil.config().facebookAuth.clientID,\n            clientSecret: configUtil.config().facebookAuth.clientSecret,\n            callbackURL: configUtil.config().facebookAuth.callbackURL\n\n        },\n\n            // facebook will send back the token and profile\n            (token, refreshToken, profile, done) => {\n                this.userDetailService.loadUserByField(\"facebookId\", profile.id).then(\n                    (user) => {\n\n                        if (!user) {\n                            // if there is no user found with that facebook id, create them\n                            var newUser = {};\n                            // set all of the facebook information in our user model\n                            newUser['facebookId'] = profile.id; // set the users facebook id                   \n                            newUser['facebookToken'] = token; // we will save the token that facebook provides to the user  \n                            this.userDetailService.createNewUser(newUser).then((finalUser) => {\n                                return done(null, finalUser.getUserObject());\n                            }, (error) => {\n                                return done(null, error);\n                            });\n\n                        } else {\n                            return done(null, user.getUserObject()); // user found, return that user\n                        }\n                    },\n                    (error) => {\n                        return done(error);\n                    });\n\n            }\n\n        ));\n        this.serializeDeserialize();\n    }\n\n    private addRoutes() {\n        this.facebookAuthentication();\n        // route for facebook authentication and login\n        router.get('/auth/facebook', passport.authenticate('facebook', { scope: 'email' }));\n\n        // handle the callback after facebook has authenticated the user\n        router.get('/auth/facebook/callback',\n            passport.authenticate('facebook'), (req, res) => this.facebookResponse(req, res)\n        );\n\n    }\n\n    private facebookResponse(req, res) {\n        res.cookie('authorization', req.user.facebookToken, { maxAge: 900000, httpOnly: true });\n        res.redirect('/data/');\n    }\n}"],"sourceRoot":"/source/"}