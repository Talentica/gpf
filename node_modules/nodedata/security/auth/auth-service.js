"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const configUtil = require('../../core/utils');
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var FacebookStrategy = require('passport-facebook').Strategy;
const service_1 = require('../../di/decorators/service');
const inject_1 = require('../../di/decorators/inject');
const exports_1 = require('../../core/exports');
var bcryptNodejs = require("bcrypt-nodejs");
let AuthService = class AuthService {
    constructor() {
        if (configUtil.config().Security.useFaceBookAuth == true) {
            this.addRoutes();
        }
    }
    authenticate() {
        this.authenticateByPasswordorToken();
        if (configUtil.config().Security.useFaceBookAuth == true) {
            this.facebookAuthentication();
        }
    }
    authenticateByPasswordorToken() {
        passport.use(new LocalStrategy((username, password, done) => {
            this.userDetailService.loadUserByUsername(username).then((user) => {
                if (!user) {
                    return done(null, false, { message: 'Incorrect username.' });
                }
                try {
                    if (!bcryptNodejs.compareSync(password, user.getPassword())) {
                        return done(null, false, { message: 'Incorrect password.' });
                    }
                }
                catch (error) {
                    return done(null, false, { message: 'Incorrect password.' });
                }
                return done(null, user.getUserObject());
            }, (error) => {
                return done(error);
            });
        }));
        // this.serializeDeserialize();
    }
    serializeDeserialize() {
        passport.serializeUser((user, cb) => {
            cb(null, user._id);
        });
        passport.deserializeUser((id, cb) => {
            this.userDetailService.loadUserById(id).
                then((user) => {
                cb(null, user.getUserObject());
            }, (err) => {
                return cb(err);
            });
        });
    }
    facebookAuthentication() {
        passport.use(new FacebookStrategy({
            // pull in our app id and secret from our Config.ts file
            clientID: configUtil.config().facebookAuth.clientID,
            clientSecret: configUtil.config().facebookAuth.clientSecret,
            callbackURL: configUtil.config().facebookAuth.callbackURL
        }, 
        // facebook will send back the token and profile
        // facebook will send back the token and profile
            (token, refreshToken, profile, done) => {
            this.userDetailService.loadUserByField("facebookId", profile.id).then((user) => {
                if (!user) {
                    // if there is no user found with that facebook id, create them
                    var newUser = {};
                    // set all of the facebook information in our user model
                    newUser['facebookId'] = profile.id; // set the users facebook id                   
                    newUser['facebookToken'] = token; // we will save the token that facebook provides to the user  
                    this.userDetailService.createNewUser(newUser).then((finalUser) => {
                        return done(null, finalUser.getUserObject());
                    }, (error) => {
                        return done(null, error);
                    });
                }
                else {
                    return done(null, user.getUserObject()); // user found, return that user
                }
            }, (error) => {
                return done(error);
            });
        }));
        this.serializeDeserialize();
    }
    addRoutes() {
        this.facebookAuthentication();
        // route for facebook authentication and login
        exports_1.router.get('/auth/facebook', passport.authenticate('facebook', { scope: 'email' }));
        // handle the callback after facebook has authenticated the user
        exports_1.router.get('/auth/facebook/callback', passport.authenticate('facebook'), (req, res) => this.facebookResponse(req, res));
    }
    facebookResponse(req, res) {
        res.cookie('authorization', req.user.facebookToken, { maxAge: 900000, httpOnly: true });
        res.redirect('/data/');
    }
};
__decorate([
    inject_1.injectbyname("UserDetailService"), 
    __metadata('design:type', Object)
], AuthService.prototype, "userDetailService", void 0);
AuthService = __decorate([
    service_1.service(), 
    __metadata('design:paramtypes', [])
], AuthService);
exports.AuthService = AuthService;

//# sourceMappingURL=auth-service.js.map
