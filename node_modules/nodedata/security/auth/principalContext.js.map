{"version":3,"sources":["security/auth/principalContext.ts"],"names":[],"mappings":"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","file":"security/auth/principalContext.js","sourcesContent":["ï»¿var domain = require('./domain');\nvar cls = require('continuation-local-storage');\n\nexport class PrincipalContext {\n    private static session: any;\n\n    static getSession() {\n        if (PrincipalContext.session != null && PrincipalContext.session != 'undefined') {\n            //cls = require('continuation-local-storage').getNamespace;\n            PrincipalContext.session = cls.getNamespace('session');\n        } else {\n            console.log('creating session from principal context');\n            //cls = require('continuation-local-storage').createNamespace;\n            PrincipalContext.session = cls.createNamespace('session');\n        }\n        return PrincipalContext.session;\n    }\n\n    static get User(): any {\n        return domain.get('context:user');\n        //return PrincipalContext.getSession().get('user');\n    }\n\n    static set User(user: any) {\n        domain.set('context:user', user);\n        PrincipalContext.setKeys('user');\n        //PrincipalContext.getSession().set('user', user);\n    }\n\n    static save(key: string, value: any): any {\n        if (!key)\n            throw 'invalid key';\n        domain.set('context:' + key.trim(), value);\n        PrincipalContext.setKeys(key);\n        //PrincipalContext.getSession().set(key, value);\n    }\n\n    static get(key: string) {\n        return domain.get('context:' + key.trim());\n        //return PrincipalContext.getSession().get(key);\n    }\n\n    private static setKeys(key: String) {\n        var keys: Array<any> = domain.get('context:_keys');\n        //var keys :Array<any> = PrincipalContext.getSession().get('_keys');\n        if (keys == null) {\n            domain.set('context:_keys', [key]);\n            //PrincipalContext.getSession().set('_keys',[key]);\n        }\n        else {\n            if (keys.indexOf(key) < 0) {\n                keys.push(key);\n                domain.set('context:_keys', keys);\n                //PrincipalContext.getSession().set('_keys',keys);\n            }\n        }\n        //console.log(\"context: \"+ JSON.stringify(PrincipalContext.getSession()));\n    }\n\n    static getAllKeys() {\n        return domain.get('context:_keys');\n        //return PrincipalContext.getSession().get('_keys');\n    }\n\n    static getAllKeyValues(): any {\n        var keys: Array<any> = PrincipalContext.getAllKeys();\n        var ret = {};\n        keys.forEach(x => {\n            var val = PrincipalContext.get(x);\n            if (x && val) {\n                try {\n                    val = JSON.parse(val);\n                }\n                catch (e) {\n                }\n                ret[x] = val;\n            }\n        });\n        return ret;\n    }\n}"],"sourceRoot":"/source/"}