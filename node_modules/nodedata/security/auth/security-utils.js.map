{"version":3,"sources":["security/auth/security-utils.ts"],"names":[],"mappings":"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","file":"security/auth/security-utils.js","sourcesContent":["import * as Enumerable from 'linq';\nvar loggedIn = require('connect-ensure-login').ensureLoggedIn;\nvar expressJwt = require('express-jwt');\nimport * as configUtils from '../../core/utils';\nimport {MetaUtils} from \"../../core/metadata/utils\";\nimport * as Utils from '../../core/utils';\nimport {Decorators} from '../../core/constants/decorators';\n\nimport * as securityImplCore from '../../core/dynamic/security-impl';\n\n(<any>securityImplCore).ensureLoggedIn = ensureLoggedIn;\n(<any>securityImplCore).isAuthorize = isAuthorize;\n\nexport function expressJwtFunc() {\n    return expressJwt({\n        secret: configUtils.securityConfig().SecurityConfig.tokenSecretkey,\n        credentialsRequired: true,\n        getToken: function fromHeaderOrQuerystring(req) {\n            if (req.headers.authorization && req.headers.authorization.split(' ')[0] === 'Bearer') {\n                return req.headers.authorization.split(' ')[1];\n            } else if (req.query && req.query.token) {\n                return req.query.token;\n            } else if (req.cookies && req.cookies.authorization) {\n                return req.cookies.authorization;\n            }\n            return null;\n        }\n    });\n}\n\nexport function ensureLoggedIn() {\n    if (configUtils.config().Security.isAutheticationEnabled == configUtils.securityConfig().AuthenticationEnabled[configUtils.securityConfig().AuthenticationEnabled.disabled]) {\n        return function (req, res, next) {\n            next();\n        }\n    }\n\n    //by token\n    if (configUtils.config().Security.authenticationType == configUtils.securityConfig().AuthenticationType[configUtils.securityConfig().AuthenticationType.TokenBased]) {\n        return expressJwtFunc();\n    }\n\n    //by password\n    if (configUtils.config().Security.authenticationType == configUtils.securityConfig().AuthenticationType[configUtils.securityConfig().AuthenticationType.passwordBased]) {\n        return loggedIn();\n    }\n\n    return function (req, res, next) {\n        next();\n    }\n}\n\nexport function isAuthorize(req: any, repository: any, invokedFunction?: string): boolean {\n    if (configUtils.config().Security.isAutheticationEnabled == configUtils.securityConfig().AuthenticationEnabled[configUtils.securityConfig().AuthenticationEnabled.disabled] || configUtils.config().Security.isAutheticationEnabled == configUtils.securityConfig().AuthenticationEnabled[configUtils.securityConfig().AuthenticationEnabled.enabledWithoutAuthorization]) {\n        return true;\n    }\n    var metadata = MetaUtils.getMetaData(repository.getEntityType(), Decorators.AUTHORIZE, invokedFunction);\n    var param = metadata && <any>metadata.params;\n    if (param && param.roles) {\n        var currentUser = req.user;\n        if (currentUser && currentUser.roles && currentUser.roles != \"\" && currentUser.roles.length > 0) {\n            var isRolePresent = Enumerable.from(param.roles)\n                .select(role => {\n                    var isAvailable = Enumerable.from(currentUser.roles)\n                        .where((roleUser: any) => roleUser.name == role)\n                        .firstOrDefault(null);\n                    if (isAvailable) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n\n                })\n                .firstOrDefault(null);\n            if (isRolePresent) {\n                return true;\n            }\n        }\n        return false;\n    }\n    var isAutherize: boolean = false;\n    //check for autherization\n    //1. get resource name         \n    var resourceName = Utils.getResourceNameFromModel(repository.getEntityType())\n    //2. get auth config from security config\n    var authCofig:any = Enumerable.from(configUtils.securityConfig().SecurityConfig.ResourceAccess)\n        .where((resourceAccess: any) => { return resourceAccess.name == resourceName; })\n        .firstOrDefault();\n    //if none found then carry on                                     \n    if (authCofig) {\n\n        //3. get user object in session\n        var userInsession = req.user;\n        //4. get roles for current user\n\n        if (!userInsession.rolenames) return false;\n\n        var userRoles: string = userInsession.rolenames;\n\n        var rolesForRead: Array<any> = Enumerable.from(authCofig.acl)\n            .where((acl: any) => { return (acl.accessmask & 1) == 1; })\n            .toArray();\n        //5 match auth config and user roles \n        rolesForRead.forEach(element => {\n            if (userRoles.indexOf(element.role) >= 0) {\n                isAutherize = true;\n            }\n\n\n        });\n        return isAutherize;\n    }\n\n    return true;\n}\n\n\n"],"sourceRoot":"/source/"}