{"version":3,"sources":["security/auth/domain.ts"],"names":[],"mappings":"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","file":"security/auth/domain.js","sourcesContent":["/**\n * Module defining a simple interface for setting and getting context objects on a domain.\n * A connect middleware allows wrapping requests in a domain and setting/getting values\n * on the active domain object.\n * @module {Object} request-context\n * @requires domain\n */\n'use strict';\n\nvar domain = require('domain');\n\n/**\n * The ContextService provides the middleware and context accessor methods\n * @type {Object}\n */\nexports = module.exports = {\n\n\t/**\n\t * Wrap the request/response loop in a namespace wrapper (by using node's domain system).\n\t * All following functions will be run in the created namespace. Returns a function\n\t * function that can be used as connect middleware.\n\t * @type {Function}\n \t * @params {String} name - The name of the namespace to create\n\t * \n\t */\n    middleware: contextMiddleware,\n\n\t/**\n\t * Set the context for a given name or path.\n\t * @param {String} name - The name of the context\n\t * @param {*} value - The value to set\n\t */\n    setContext: setContext,\n\n\t/**\n\t * Alias for the setContext method.\n\t * @param {String} name - The name of the context\n\t * @param {*} value - The value to set\n\t */\n    set: setContext,\n\n\t/**\n\t * Return the context or a context variable for a name or path.\n\t * @param {String} name - The name or path of the context or context property to retrieve\n\t * @returns {undefined|*} The context for the given specifier or null if no such name could be found\n\t */\n    getContext: getContext,\n\n\t/**\n\t * Alias for the getContext method.\n\t * @param {String} name - The name or path of the context or context property to retrieve\n\t * @returns {undefined|*} The context for the given specifier or null if no such name could be found\n\t */\n\n    get: getContext,\n};\n\n/**\n * Return the context for a name.\n * @api private\n * @param {String} name - The name of the context to retrieve\n * @param {domain} [current] - A domain object to retrieve the context object from\n * @returns {*} The context for the given name\n */\nfunction getContext(name, current) {\n    var context = getCurrent(current);\n    if (!context) {\n        return undefined;\n    }\n\n    return getPropertyForPath(context, name);\n}\n\n/**\n * Set the context for a given name\n * @api private\n * @param {String} name - The name of the context\n * @param {*} value - The value to set\n * @param {domain} [current] - A domain object to retrieve the context object from\n * @throws Error\n */\nfunction setContext(name, value, current) {\n    var context = getCurrent(current);\n    if (!context) {\n        throw new Error('No active context found to set property ' + name);\n    }\n\n    setPropertyForPath(context, name, value);\n}\n\n/**\n * Wrap the request/response loop in a namespace wrapper (by using node's domain system).\n * @api private\n * @param {String} namespace - The name of the namespace to create\n * @returns {Function} A function that can be used as request middleware. Following functions\n * will be run in the created namespace.\n */\nfunction contextMiddleware(namespace) {\n    if (!namespace) {\n        throw new Error('No namespace specified!');\n    }\n\n    return function runInContextMiddleware(req, res, next) {\n        // We want multiple request-context consumers to use the same domain\n        // context object rather than creating a bunch of nested domains.\n        // Their namespaces should be sufficient to keep each consumer's\n        // data separate from the others.\n        //if (domain.active && domain.active.__$cntxt__) {\n        //    setContext(namespace, Object.create(null), domain.active);\n        //    next();\n        //    return;\n        //}\n\n        var d = domain.create();\n        d.add(req);\n        d.add(res);\n        d.on('error', handleError);\n\n        setContext(namespace, Object.create(null), d);\n\n        d.run(next);\n\n        function handleError(err) {\n            res.setHeader('Connection', 'close');\n            next(err);\n        }\n    };\n}\n\n/**\n * Get the current active domain context object\n * @api private\n * @param {domain} [current] - A domain object the context container should be looked upon\n * @returns {null|Object}\n */\nfunction getCurrent(current) {\n    if (!current) {\n        current = domain.active;\n    }\n\n    // no active domain found\n    if (!current) {\n        return null;\n    }\n\n    // get/set the internal context store from/on the active domain object\n    current.__$cntxt__ = current.__$cntxt__ || Object.create(null);\n    return current.__$cntxt__;\n}\n\n/**\n * Get the object property for a given path divided by dots\n * @api private\n * @param {Object} obj - The object to query\n * @param {String} path - The objects property path divided by dots\n * @returns {*}\n */\nfunction getPropertyForPath(obj, path) {\n    if (obj && path) {\n        var arr = normalizePathArray(path);\n\n        while (arr.length) {\n            if (!(obj = obj[arr.shift()])) {\n                break;\n            }\n        }\n    }\n    return obj;\n}\n\n/**\n * Set the object property for a given path divided by dots\n * @api private\n * @param {Object} obj - The object to modify\n * @param {String} path - The objects property path divided by dots\n * @param {*} value - The value to set on the objects path\n * @returns {*}\n */\nfunction setPropertyForPath(obj, path, value) {\n    var arr = normalizePathArray(path);\n    var len = arr.length - 1;\n\n    for (var i = 0; i < len; i += 1) {\n        if (typeof obj[arr[i]] === 'undefined') {\n            // create a new object container for undefined paths\n            obj[arr[i]] = {};\n        }\n        obj = obj[arr[i]];\n    }\n\n    obj[arr[len]] = value;\n}\n\n/**\n * Normalize the namespace of a path by replacing all ':' to '.'.\n * @api private\n * @param {String} path - The context object property path divided by dots\n * @returns {*}\n */\nfunction normalizePathArray(path) {\n    return path.replace(':', '.').split('.');\n}\n"],"sourceRoot":"/source/"}