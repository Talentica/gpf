{"version":3,"sources":["core/services/pre-auth-service.ts"],"names":[],"mappings":";AAAA,wBAAwB,mBAAmB,CAAC,CAAA;AAC5C,MAAY,KAAK,WAAM,UAAU,CAAC,CAAA;AAElC,6BAAyB,yBAAyB,CAAC,CAAA;AACnD,6BAAyB,0BAA0B,CAAC,CAAA;AACpD,MAAY,UAAU,WAAM,MAAM,CAAC,CAAA;AACnC,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AAErB;IAEI,OAAO,kBAAkB,CAAC,MAAM,EAAE,YAAiC,EAAE,GAAG;QACpE,IAAI,QAAQ,GAAG,iBAAS,CAAC,wBAAwB,CAAC,CAAC,uBAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QACxE,IAAI,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;QAC7J,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,iBAAiB;YACjB,sBAAsB;YACtB,gDAAgD;YAChD,0BAA0B;YAC1B,GAAG;YACH,kCAAkC;YAClC,gDAAgD;YAChD,mDAAmD;YACnD,OAAO;YACP,GAAG;YACH,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAChF,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS;oBACrB,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG;oBACT,uBAAU,CAAC,QAAQ,CAAC,8CAA8C,GAAG,GAAG,CAAC,CAAC;oBAC1E,MAAM,GAAG,CAAC;gBACd,CAAC,CAAC,CAAC;YACP,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;AACL,CAAC;AA/BY,sBAAc,iBA+B1B,CAAA","file":"core/services/pre-auth-service.js","sourcesContent":["import {MetaUtils} from \"../metadata/utils\";\nimport * as Utils from \"../utils\";\nimport {IPreauthorizeParams} from '../decorators/interfaces';\nimport {Decorators} from '../constants/decorators';\nimport {winstonLog} from '../../logging/winstonLog';\nimport * as Enumerable from 'linq';\nvar Q = require('q');\n\nexport class PreAuthService {\n\n    static isPreAuthenticated(params, preAuthParam: IPreauthorizeParams, key): Q.Promise<any> {\n        var services = MetaUtils.getMetaDataForDecorators([Decorators.SERVICE]);\n        var service = Enumerable.from(services).where(x => x.metadata[0].params.serviceName == preAuthParam.serviceName).select(x => x.metadata[0]).firstOrDefault();\n        if (service) {\n            //var param = [];\n            //param.push(content);\n            //if (preAuthParam.params.entity == '#entity') {\n            //    param.push(content);\n            //}\n            //if (preAuthParam.params.other) {\n            //    for (var i in preAuthParam.params.other) {\n            //        param.push(preAuthParam.params.other[i]);\n            //    }\n            //}\n            var ret = service.target[preAuthParam.methodName].apply(service.target, params);\n            if (Utils.isPromise(ret)) {\n                return ret.then(isAllowed => {\n                    return isAllowed;\n                }).catch((err) => {\n                    winstonLog.logError('[PreAuthService: isPreAuthenticated]: error ' + err);\n                    throw err;\n                });\n            }\n            else {\n                return Q.when(ret);\n            }\n        }\n        return Q.when(true);\n    }\n}"],"sourceRoot":"/source/"}