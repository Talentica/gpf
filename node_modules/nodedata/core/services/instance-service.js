"use strict";
const utils = require("../utils");
const Enumerable = require('linq');
class InstanceService {
    static getInstance(entity, id, param) {
        if (id) {
            var meta = utils.getPrimaryKeyMetadata(entity);
            if (meta) {
                param[meta.propertyKey] = id;
            }
        }
        InstanceService.initProperties(entity, true, param);
        return InstanceService.getInstanceFromType(entity, true, param);
    }
    static getObjectFromJson(entity, param) {
        InstanceService.initProperties(entity, true, param);
        return InstanceService.getInstanceFromType(entity, true, param);
    }
    static getInstanceFromType(type, isNew, param) {
        var t = type.constructor;
        return InstanceService.createObjectInstance(t, isNew, param);
    }
    static createObjectInstance(t, isNew, param) {
        if (isNew) {
            return InstanceService.getNewInstance(t, param);
        }
        else {
            return InstanceService.getExistingInstance(t, param);
        }
    }
    static getNewInstance(t, param) {
        // This invokes constructor of the object
        var newInstance = new t(param);
        if (param) {
            for (var prop in param) {
                newInstance[prop] = param[prop];
            }
        }
        return newInstance;
    }
    static getExistingInstance(t, param) {
        // No constructir is invoked
        var existingInstance = Object.create(t.prototype);
        if (param) {
            for (var prop in param) {
                existingInstance[prop] = param[prop];
            }
        }
        return existingInstance;
    }
    static initProperties(type, isNew, param) {
        var metas = utils.getAllRelationsForTargetInternal(type);
        if (metas) {
            metas.forEach(x => {
                let meta = x;
                let p = meta.params;
                if (param[meta.propertyKey]) {
                    var value = param[meta.propertyKey];
                    if (value) {
                        if (meta.propertyType.isArray) {
                            if (value.length > 0 && utils.isJSON(value[0])) {
                                var res = [];
                                Enumerable.from(value).forEach(x => {
                                    InstanceService.initProperties(p.itemType, isNew, x);
                                    res.push(InstanceService.createObjectInstance(p.itemType, isNew, x));
                                });
                                param[meta.propertyKey] = res;
                            }
                        }
                        else {
                            if (utils.isJSON(value)) {
                                InstanceService.initProperties(p.itemType, isNew, value);
                                param[meta.propertyKey] = InstanceService.createObjectInstance(p.itemType, isNew, value);
                            }
                        }
                    }
                }
            });
        }
    }
}
exports.InstanceService = InstanceService;

//# sourceMappingURL=instance-service.js.map
