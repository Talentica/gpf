{"version":3,"sources":["core/services/instance-service.ts"],"names":[],"mappings":"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","file":"core/services/instance-service.js","sourcesContent":["import {getEntity} from '../dynamic/model-entity';\nimport * as utils from \"../utils\";\nimport {MetaData} from '../metadata/metadata';\nimport {IAssociationParams} from '../decorators/interfaces';\nimport * as Enumerable from 'linq';\n\nexport class InstanceService {\n\n    static getInstance(entity: any, id: any, param: any) {\n        if (id) {\n            var meta = utils.getPrimaryKeyMetadata(entity);\n            if (meta) {\n                param[meta.propertyKey] = id;\n            }\n        }\n        InstanceService.initProperties(entity, true, param);\n        return InstanceService.getInstanceFromType(entity, true, param);\n    }\n\n    static getObjectFromJson(entity: any, param?: any) {\n        InstanceService.initProperties(entity, true, param);\n        return InstanceService.getInstanceFromType(entity, true, param);\n    }\n\n    private static getInstanceFromType(type: any, isNew: boolean, param?: any) {\n        var t: (param) => void = type.constructor;\n        return InstanceService.createObjectInstance(t, isNew, param);\n    }\n\n    private static createObjectInstance(t: any, isNew: boolean, param?: any) {\n        if (isNew) {\n            return InstanceService.getNewInstance(t, param);\n        }\n        else {\n            return InstanceService.getExistingInstance(t, param);\n        }\n    }\n\n    private static getNewInstance(t: any, param?: any) {\n        // This invokes constructor of the object\n        var newInstance = new t(param);\n        if (param) {\n            for (var prop in param) {\n                newInstance[prop] = param[prop];\n            }\n        }\n        return newInstance;\n    }\n\n    private static getExistingInstance(t: any, param?: any) {\n        // No constructir is invoked\n        var existingInstance = Object.create(t.prototype);\n        if (param) {\n            for (var prop in param) {\n                existingInstance[prop] = param[prop];\n            }\n        }\n        return existingInstance;\n    }\n\n    private static initProperties(type: any, isNew: boolean, param: any) {\n        var metas = utils.getAllRelationsForTargetInternal(type);\n        if (metas) {\n            metas.forEach(x => {\n                let meta = <MetaData>x;\n                let p = <IAssociationParams>meta.params;\n                if (param[meta.propertyKey]) {\n                    var value = param[meta.propertyKey];\n                    if (value) {\n                        if (meta.propertyType.isArray) {\n                            if (value.length > 0 && utils.isJSON(value[0])) {\n                                var res = [];\n                                Enumerable.from(value).forEach(x => {\n                                    InstanceService.initProperties(p.itemType, isNew, x);\n                                    res.push(InstanceService.createObjectInstance(p.itemType, isNew, x));\n                                });\n                                param[meta.propertyKey] = res;\n                            }\n                        }\n                        else {\n                            if (utils.isJSON(value)) {\n                                InstanceService.initProperties(p.itemType, isNew, value);\n                                param[meta.propertyKey] = InstanceService.createObjectInstance(p.itemType, isNew, value);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n}\n"],"sourceRoot":"/source/"}