{"version":3,"sources":["core/dynamic/dynamic-repository.ts"],"names":[],"mappings":"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","file":"core/dynamic/dynamic-repository.js","sourcesContent":["import * as Enumerable from 'linq';\nimport express = require(\"express\");\nvar router = express.Router();\n\nimport Q = require('q');\n\nimport {IEntityService} from \"../interfaces/entity-service\";\nimport {Container} from '../../di';\nimport * as Utils from '../utils';\nimport {pathRepoMap, getEntity, getModel} from './model-entity';\nimport {InstanceService} from '../services/instance-service';\nimport {MetaUtils} from \"../metadata/utils\";\nimport {Decorators} from '../constants';\nimport {QueryOptions} from '../interfaces/queryOptions';\n\n\nvar modelNameRepoModelMap: { [key: string]: IDynamicRepository } = {};\n \nexport function GetRepositoryForName(name: string): IDynamicRepository {\n    return modelNameRepoModelMap[name]\n}\n\nexport interface IDynamicRepository {\n    getEntity();\n    getModel();\n    modelName();\n    getEntityType(): any;\n    getRootRepo(): IDynamicRepository;\n\n    bulkPost(objArr: Array<any>);\n    bulkPut(objArr: Array<any>);\n    bulkPatch(objArr: Array<any>);\n    bulkPutMany(objIds: Array<any>, obj: any);\n    bulkDel(objArr: Array<any>);\n\n    findOne(id: any): Q.Promise<any>;\n    findMany(ids: Array<any>, toLoadEmbeddedChilds?: boolean): Q.Promise<any>;\n    findAll(): Q.Promise<any>;\n    //findWhere(query, selectedFields?: Array<any>): Q.Promise<any>;\n    findWhere(query, selectedFields?: Array<any>, queryOptions?: QueryOptions): Q.Promise<any>;\n    countWhere(query);\n    distinctWhere(query);\n    findByField(fieldName, value): Q.Promise<any>;\n    findChild(id, prop): Q.Promise<any>;\n\n    put(id: any, obj: any): Q.Promise<any>;\n    post(obj: any): Q.Promise<any>;\n    delete(id: any);\n    patch(id: any, obj);\n}\n\nexport class DynamicRepository implements IDynamicRepository {\n    private path: string;\n    private model: any;\n    private metaModel: any;\n    private entity: any;\n    private entityService: IEntityService;\n    private rootLevelRep: IDynamicRepository;\n    //private modelRepo: any;\n\n    public initialize(repositoryPath: string, target: Function | Object, model?: any, rootRepo?: IDynamicRepository) {\n        //console.log(schema);\n        this.path = repositoryPath;\n        this.entity = target;\n        this.rootLevelRep = rootRepo;\n        if (target instanceof DynamicRepository) {\n            target.rootLevelRep = rootRepo;\n        }\n        modelNameRepoModelMap[this.path] = this;\n    }\n\n    public getEntity() {\n        return getEntity(pathRepoMap[this.path].schemaName);\n    }\n\n    public getModel() {\n        return Utils.entityService(pathRepoMap[this.path].modelType).getModel(pathRepoMap[this.path].schemaName);\n    }\n\n    public getRootRepo() {\n        return this.rootLevelRep;\n    }\n\n   public bulkPost(objArr: Array<any>) {\n        var objs = [];\n        objArr.forEach(x => {\n            objs.push(InstanceService.getInstance(this.getEntity(), null, x));\n        });\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkPost(this.path, objs).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                return res;\n            }\n            return result;\n        });\n    }\n\n    public bulkPut(objArr: Array<any>) {\n        var objs = [];\n        objArr.forEach(x => {\n            objs.push(InstanceService.getInstance(this.getEntity(), null, x));\n        });\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkPut(this.path, objs);\n    }\n\n    public bulkPatch(objArr: Array<any>) {\n        var objs = [];\n        objArr.forEach(x => {\n            objs.push(InstanceService.getInstance(this.getEntity(), null, x));\n        });\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkPatch(this.path, objs);\n    }\n\n    public bulkPutMany(objIds: Array<any>, obj: any) {\n        obj = InstanceService.getInstance(this.getEntity(), null, obj);\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkPutMany(this.path, objIds, obj);\n    }\n\n    public bulkDel(objArr: Array<any>) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkDel(this.path, objArr);\n    }\n\n    public modelName() {\n        return this.path;\n    }\n\n    public getEntityType() {\n        return this.entity;\n    }\n\n    /**\n     * Returns all the items in a collection\n     */\n    public findAll(): Q.Promise<any> {\n        return Utils.entityService(pathRepoMap[this.path].modelType).findAll(this.path).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                return res;\n            }\n            return result;\n        });\n    }\n\n    // public findWhere(query, selectedFields?: Array<any>): Q.Promise<any> {\n    //     return Utils.entityService(pathRepoMap[this.path].modelType).findWhere(this.path, query, selectedFields).then(result => {\n    //         if (result && result.length > 0) {\n    //             var res = [];\n    //             result.forEach(x => {\n    //                 res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n    //             });\n    //             return res;\n    //         }\n    //         return result;\n    //     });\n    // }\n\n    public findWhere(query, selectedFields?: Array<any>, queryOptions?: QueryOptions, toLoadChilds?: boolean): Q.Promise<any> {\n        return Utils.entityService(pathRepoMap[this.path].modelType).findWhere(this.path, query, selectedFields,queryOptions, toLoadChilds).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                return res;\n            }\n            return result;\n        });\n    }\n\n    public countWhere(query) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).countWhere(this.path, query).then(result => {\n            return result;\n        });\n    }\n\n    public distinctWhere(query) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).distinctWhere(this.path, query).then(result => {\n            return result;\n        });\n    }\n\n\n    public findOne(id) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).findOne(this.path, id).then(result => {\n            return InstanceService.getObjectFromJson(this.getEntity(), result);\n        });\n    }\n\n    public findByField(fieldName, value): Q.Promise<any> {\n        return Utils.entityService(pathRepoMap[this.path].modelType).findByField(this.path, fieldName, value);\n    }\n\n    public findMany(ids: Array<any>, toLoadEmbeddedChilds?: boolean) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).findMany(this.path, ids, toLoadEmbeddedChilds).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                return res;\n            }\n            return result;\n        });\n    }\n\n    public findChild(id, prop): Q.Promise<any> {\n        //check if child model is diffrent from parent model (parent is doc and child is entity)\n        //get child repo\n        //call parent's find one and get the array of ids\n        //return child repo.findmany (ids)\n\n        //var childMeta:string = Utils.getRepoPathForChildIfDifferent(this.getEntity(), prop);\n        //if (childMeta)\n        //    return this.findOne(id).then(parent => {\n        //        var chilldIds = parent[prop];\n        //        if (!(chilldIds instanceof Array)) {\n        //            chilldIds = [chilldIds];\n        //        }\n        //        return Utils.entityService(pathRepoMap[childMeta].modelType).findMany(childMeta,chilldIds);\n        //    });\n\n        return Utils.entityService(pathRepoMap[this.path].modelType).findChild(this.path, id, prop);\n    }\n\n    /**\n     * case 1: all new - create main item and child separately and embed if true\n     * case 2: some new, some update - create main item and update/create child accordingly and embed if true\n     * @param obj\n     */\n    public post(obj: any): Q.Promise<any> {\n        obj = InstanceService.getInstance(this.getEntity(), null, obj);\n        return Utils.entityService(pathRepoMap[this.path].modelType).post(this.path, obj);\n    }\n\n    public put(id: any, obj: any) {\n        obj = InstanceService.getInstance(this.getEntity(), id, obj);\n        return Utils.entityService(pathRepoMap[this.path].modelType).put(this.path, id, obj);\n    }\n        \n    public delete(id: any) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).del(this.path, id);\n    }\n\n    public patch(id: any, obj) {\n        obj = InstanceService.getInstance(this.getEntity(), id, obj);\n        return Utils.entityService(pathRepoMap[this.path].modelType).patch(this.path, id, obj);;\n    }\n\n}"],"sourceRoot":"/source/"}