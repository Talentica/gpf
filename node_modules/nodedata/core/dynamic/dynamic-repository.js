"use strict";
const express = require("express");
var router = express.Router();
const Utils = require('../utils');
const model_entity_1 = require('./model-entity');
const instance_service_1 = require('../services/instance-service');
var modelNameRepoModelMap = {};
function GetRepositoryForName(name) {
    return modelNameRepoModelMap[name];
}
exports.GetRepositoryForName = GetRepositoryForName;
class DynamicRepository {
    //private modelRepo: any;
    initialize(repositoryPath, target, model, rootRepo) {
        //console.log(schema);
        this.path = repositoryPath;
        this.entity = target;
        this.rootLevelRep = rootRepo;
        if (target instanceof DynamicRepository) {
            target.rootLevelRep = rootRepo;
        }
        modelNameRepoModelMap[this.path] = this;
    }
    getEntity() {
        return model_entity_1.getEntity(model_entity_1.pathRepoMap[this.path].schemaName);
    }
    getModel() {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).getModel(model_entity_1.pathRepoMap[this.path].schemaName);
    }
    getRootRepo() {
        return this.rootLevelRep;
    }
    bulkPost(objArr) {
        var objs = [];
        objArr.forEach(x => {
            objs.push(instance_service_1.InstanceService.getInstance(this.getEntity(), null, x));
        });
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).bulkPost(this.path, objs).then(result => {
            if (result && result.length > 0) {
                var res = [];
                result.forEach(x => {
                    res.push(instance_service_1.InstanceService.getObjectFromJson(this.getEntity(), x));
                });
                return res;
            }
            return result;
        });
    }
    bulkPut(objArr) {
        var objs = [];
        objArr.forEach(x => {
            objs.push(instance_service_1.InstanceService.getInstance(this.getEntity(), null, x));
        });
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).bulkPut(this.path, objs);
    }
    bulkPatch(objArr) {
        var objs = [];
        objArr.forEach(x => {
            objs.push(instance_service_1.InstanceService.getInstance(this.getEntity(), null, x));
        });
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).bulkPatch(this.path, objs);
    }
    bulkPutMany(objIds, obj) {
        obj = instance_service_1.InstanceService.getInstance(this.getEntity(), null, obj);
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).bulkPutMany(this.path, objIds, obj);
    }
    bulkDel(objArr) {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).bulkDel(this.path, objArr);
    }
    modelName() {
        return this.path;
    }
    getEntityType() {
        return this.entity;
    }
    /**
     * Returns all the items in a collection
     */
    findAll() {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).findAll(this.path).then(result => {
            if (result && result.length > 0) {
                var res = [];
                result.forEach(x => {
                    res.push(instance_service_1.InstanceService.getObjectFromJson(this.getEntity(), x));
                });
                return res;
            }
            return result;
        });
    }
    // public findWhere(query, selectedFields?: Array<any>): Q.Promise<any> {
    //     return Utils.entityService(pathRepoMap[this.path].modelType).findWhere(this.path, query, selectedFields).then(result => {
    //         if (result && result.length > 0) {
    //             var res = [];
    //             result.forEach(x => {
    //                 res.push(InstanceService.getObjectFromJson(this.getEntity(), x));
    //             });
    //             return res;
    //         }
    //         return result;
    //     });
    // }
    findWhere(query, selectedFields, queryOptions, toLoadChilds) {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).findWhere(this.path, query, selectedFields, queryOptions, toLoadChilds).then(result => {
            if (result && result.length > 0) {
                var res = [];
                result.forEach(x => {
                    res.push(instance_service_1.InstanceService.getObjectFromJson(this.getEntity(), x));
                });
                return res;
            }
            return result;
        });
    }
    countWhere(query) {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).countWhere(this.path, query).then(result => {
            return result;
        });
    }
    distinctWhere(query) {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).distinctWhere(this.path, query).then(result => {
            return result;
        });
    }
    findOne(id) {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).findOne(this.path, id).then(result => {
            return instance_service_1.InstanceService.getObjectFromJson(this.getEntity(), result);
        });
    }
    findByField(fieldName, value) {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).findByField(this.path, fieldName, value);
    }
    findMany(ids, toLoadEmbeddedChilds) {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).findMany(this.path, ids, toLoadEmbeddedChilds).then(result => {
            if (result && result.length > 0) {
                var res = [];
                result.forEach(x => {
                    res.push(instance_service_1.InstanceService.getObjectFromJson(this.getEntity(), x));
                });
                return res;
            }
            return result;
        });
    }
    findChild(id, prop) {
        //check if child model is diffrent from parent model (parent is doc and child is entity)
        //get child repo
        //call parent's find one and get the array of ids
        //return child repo.findmany (ids)
        //var childMeta:string = Utils.getRepoPathForChildIfDifferent(this.getEntity(), prop);
        //if (childMeta)
        //    return this.findOne(id).then(parent => {
        //        var chilldIds = parent[prop];
        //        if (!(chilldIds instanceof Array)) {
        //            chilldIds = [chilldIds];
        //        }
        //        return Utils.entityService(pathRepoMap[childMeta].modelType).findMany(childMeta,chilldIds);
        //    });
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).findChild(this.path, id, prop);
    }
    /**
     * case 1: all new - create main item and child separately and embed if true
     * case 2: some new, some update - create main item and update/create child accordingly and embed if true
     * @param obj
     */
    post(obj) {
        obj = instance_service_1.InstanceService.getInstance(this.getEntity(), null, obj);
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).post(this.path, obj);
    }
    put(id, obj) {
        obj = instance_service_1.InstanceService.getInstance(this.getEntity(), id, obj);
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).put(this.path, id, obj);
    }
    delete(id) {
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).del(this.path, id);
    }
    patch(id, obj) {
        obj = instance_service_1.InstanceService.getInstance(this.getEntity(), id, obj);
        return Utils.entityService(model_entity_1.pathRepoMap[this.path].modelType).patch(this.path, id, obj);
        ;
    }
}
exports.DynamicRepository = DynamicRepository;

//# sourceMappingURL=dynamic-repository.js.map
