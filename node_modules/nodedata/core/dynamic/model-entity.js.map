{"version":3,"sources":["core/dynamic/model-entity.ts"],"names":[],"mappings":";AAEA,IAAI,eAAe,GAA2B,EAAE,CAAC;AACtC,mBAAW,GAAsE,EAAE,CAAC;AAE/F,2BAAkC,UAAkB,EAAE,MAAW,EAAE,KAAU,EAAE,MAAW;IACtF,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/B,eAAe,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;IACnF,CAAC;AACL,CAAC;AAJe,yBAAiB,oBAIhC,CAAA;AAED,mBAA0B,UAAkB;IACxC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC;IAEhB,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC;AACjD,CAAC;AALe,iBAAS,YAKxB,CAAA;AAED,kBAAyB,UAAkB;IACvC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC;IAEhB,gDAAgD;IAChD,+CAA+C;IAC/C,2GAA2G;IAC3G,GAAG;IACH,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC;AAChD,CAAC;AATe,gBAAQ,WASvB,CAAA;AAED,mBAA0B,UAAkB;IACxC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC;IAChB,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC;AACjD,CAAC;AAJe,iBAAS,YAIxB,CAAA","file":"core/dynamic/model-entity.js","sourcesContent":["import {PrincipalContext} from '../../security/auth/principalContext';\nimport {User} from '../../security/auth/user';\nvar schemaNameModel: { [key: string]: any } = {};\nexport var pathRepoMap: { [key: string]: { schemaName: string, modelType: string } } = <any>{};\n\nexport function updateModelEntity(schemaName: string, entity: any, model: any, schema: any) {\n    if (!schemaNameModel[schemaName]) {\n        schemaNameModel[schemaName] = { entity: entity, model: model ,schema: schema };\n    }\n}\n\nexport function getEntity(schemaName: string): any {\n    if (!schemaNameModel[schemaName])\n        return null;\n\n    return schemaNameModel[schemaName]['entity'];\n}\n\nexport function getModel(schemaName: string): any {\n    if (!schemaNameModel[schemaName])\n        return null;\n\n    //let currentUser: User = PrincipalContext.User;\n    //if (currentUser && currentUser.getDbName()) {\n    //    return getDbSpecifcModel(schemaName, schemaNameModel[schemaName]['schema'], currentUser.getDbName());\n    //}\n    return schemaNameModel[schemaName]['model'];\n}\n\nexport function getSchema(schemaName: string) {\n    if (!schemaNameModel[schemaName])\n        return null;\n    return schemaNameModel[schemaName]['schema'];\n}"],"sourceRoot":"/source/"}