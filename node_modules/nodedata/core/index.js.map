{"version":3,"sources":["core/index.ts"],"names":[],"mappings":"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","file":"core/index.js","sourcesContent":["import {Initalize} from './initialize/initialize';\nimport fs = require('fs');\nvar recursiveReadDir = require('recursive-readdir-synchronous');\nimport path = require('path');\nimport Q = require(\"q\");\nimport * as Utils from './utils';\nimport {MetaUtils} from './metadata/utils'\nimport {IEntityService} from './interfaces/entity-service';\n//import {PrincipalContext} from '../security/auth/principalContext';\n//var ns = PrincipalContext.getSession();\nvar domain = require('../security/auth/domain');\n\n//import linq = require('../typings/linq/linq');\nimport * as Enumerable from 'linq';\n\n// Ignore .d.ts and all other non .ts files\nfunction ignoreFile(file: string) {\n    return !file.endsWith('.js') || file.endsWith('.spec.js');\n}\n\n// ignore node_modules or folders starting with '.', eg. '.git'\nfunction ignoreDirectory(file: string, stats: fs.Stats) {\n    return path.basename(file) == \"node_modules\" || path.basename(file).startsWith('.') || path.basename(file) == \"unit-test\";\n}\n\nfunction readIgnore(file: string, stats: fs.Stats) {\n    return (stats.isFile() && ignoreFile(file))\n        || (stats.isDirectory() && ignoreDirectory(file, stats));\n}\n\nlet _appRoot = process.cwd();\n\nclass Dynamic {\n    constructor(config: any, securityConfig: any) {\n        Utils.config(config);\n        Utils.securityConfig(securityConfig);\n        config = config;\n        securityConfig = securityConfig;\n        let ignorePaths = config.Config && config.Config.ignorePaths || [];\n        var files = this.scanDirectories(ignorePaths);\n        this.loadComponents(files);\n        this.initialize(files);\n    }\n\n    scanDirectories(ignorePaths: Array<string|Function>): Array<string> {\n        ignorePaths.push(readIgnore);\n        return recursiveReadDir(_appRoot, ignorePaths);\n        //return Q.nfapply(recursiveReadDir, [_appRoot, [readIgnore]]);\n    }\n\n    loadComponents(files: Array<string>) {\n        Enumerable.from(files)\n            .forEach(x => {\n                try {\n                    var route = path.resolve(x.substring(0, x.lastIndexOf('.')));\n                    require(route);\n                } catch (e) {\n                    console.log(e);\n                    throw e;\n                }\n            });\n    }\n\n    initialize(files: Array<string>) {\n        new Initalize(files);\n    }\n}\n\nmodule.exports = function (config: any, securityConfig: any, appRoot?: string,\n    entityServiceInst?: IEntityService,\n    sqlServerInst?: IEntityService) {\n    // application root (where we scan the components) set priority: \n    // 1. User provided \n    // 2. Environment Variable \n    // 3. Current working directory\n    _appRoot = appRoot || process.env.APP_ROOT || process.cwd();\n    //Utils.entityService(entityServiceInst);\n    //Utils.sqlEntityService(sqlServerInst);\n    new Dynamic(config, securityConfig);\n    MetaUtils.refreshDerivedObjectsMetadata();\n}\n\nlet components: Array<any> = [];\n\nexport function addComponent(comp: any) {\n    components.push(comp);\n}\n\nexport function initialize(config: any, securityConfig: any, appRoot?: string,\n    entityServiceInst?: IEntityService,\n    sqlServerInst?: IEntityService) {\n    // application root (where we scan the components) set priority: \n    // 1. User provided \n    // 2. Environment Variable \n    // 3. Current working directory\n    _appRoot = appRoot || process.env.APP_ROOT || process.cwd();\n    //Utils.entityService(entityServiceInst);\n    new Dynamic(config, securityConfig);\n    //Utils.sqlEntityService(sqlServerInst);\n    components.forEach(x => {\n        x.default();\n    });\n}\n\nmodule.exports.register = function (app) {\n    app.use(domain.middleware('context'));\n     //app.use(function (req, res, next) {\n     //    ns.bindEmitter(req);\n     //    ns.bindEmitter(res);\n     //     ns.run(function () {\n     //       next();\n     //     });\n     //});\n}"],"sourceRoot":"/source/"}