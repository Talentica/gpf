{"version":3,"sources":["core/initialize/initialize.ts"],"names":[],"mappings":"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","file":"core/initialize/initialize.js","sourcesContent":["import {InitializeRepositories} from \"./initialize-repositories\";\nimport {InitializeControllers} from \"./initialize-controllers\";\nimport {ParamTypeCustom} from '../metadata/param-type-custom';\nimport {router} from '../exports';\nimport path = require('path');\nimport * as Enumerable from 'linq';\n\nimport {MetaUtils} from \"../metadata/utils\";\nimport * as Utils from \"../utils\";\n\nexport class Initalize {\n    constructor(files: Array<String>) {\n        new InitializeRepositories();\n        new InitializeControllers();\n        //this.configureAcl();\n        this.configureBase();\n    }\n\n    configureBase() {\n        var path = Utils.config().Config.basePath.indexOf('/') === 0 ? Utils.config().Config.basePath : '/' + Utils.config().Config.basePath;\n        router.get(path,\n            (req, res) => {\n                //fetch all resources name (not the model name) in an array\n                var allresourcesNames: Array<string> = Utils.getAllResourceNames();\n                var allresourceJson = [];\n                var fullbaseUrl: string = \"\";\n                fullbaseUrl = this.getProtocol(req) + '://' + req.get('host') + req.originalUrl;\n                allresourcesNames.forEach(resource => {\n                    var resoucejson = {};\n                    resoucejson[resource] = fullbaseUrl + (resource[0] === '/' ? resource : '/' + resource);//+ tokenUrl;\n                    allresourceJson.push(resoucejson);\n                });\n                //loop through rsources and push in json array with name as key and url as value\n                res.set(\"Content-Type\", \"application/json\");\n\n                res.send(JSON.stringify(allresourceJson, null, 4));\n            }\n        )\n    }\n\n    configureAcl() {\n        var acl = require('acl');\n        acl = new acl(new acl.mongodbBackend(Utils.config().Config.DbConnection, \"acl\"));        \n\n        Utils.securityConfig().SecurityConfig.ResourceAccess.forEach(resource => {\n            resource.acl.forEach(access => {\n                var aclString: Array<string> = this.aclStringFromMask(access[\"accessmask\"]);\n                acl.allow(access[\"role\"], resource[\"name\"], aclString, function (err, res) {\n                    if (res) {\n                        console.log(\"User joed is allowed to view blogs\")\n                    }\n                    if (err) {\n                        //console.log(\"error in acl \" + err);\n                    }\n                })\n            });\n\n        });\n    }\n\n    aclStringFromMask(mask: number): Array<string> {\n        var aclString: Array<string> = new Array<string>();\n        if ((mask & 1) == 1) aclString.push(\"view\");\n        if ((mask & 2) == 2) aclString.push(\"edit\");\n        if ((mask & 4) == 4) aclString.push(\"delete\");\n        return aclString;\n    }\n\n    private getProtocol(req) : string{\n        if(req.headers && req.headers[\"x-arr-ssl\"]){\n            return \"https\";\n        }\n        else{\n            return req.protocol;\n        }\n    }\n\n}"],"sourceRoot":"/source/"}