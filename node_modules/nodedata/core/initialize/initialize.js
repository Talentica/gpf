"use strict";
const initialize_repositories_1 = require("./initialize-repositories");
const initialize_controllers_1 = require("./initialize-controllers");
const exports_1 = require('../exports');
const Utils = require("../utils");
class Initalize {
    constructor(files) {
        new initialize_repositories_1.InitializeRepositories();
        new initialize_controllers_1.InitializeControllers();
        //this.configureAcl();
        this.configureBase();
    }
    configureBase() {
        var path = Utils.config().Config.basePath.indexOf('/') === 0 ? Utils.config().Config.basePath : '/' + Utils.config().Config.basePath;
        exports_1.router.get(path, (req, res) => {
            //fetch all resources name (not the model name) in an array
            var allresourcesNames = Utils.getAllResourceNames();
            var allresourceJson = [];
            var fullbaseUrl = "";
            fullbaseUrl = this.getProtocol(req) + '://' + req.get('host') + req.originalUrl;
            allresourcesNames.forEach(resource => {
                var resoucejson = {};
                resoucejson[resource] = fullbaseUrl + (resource[0] === '/' ? resource : '/' + resource); //+ tokenUrl;
                allresourceJson.push(resoucejson);
            });
            //loop through rsources and push in json array with name as key and url as value
            res.set("Content-Type", "application/json");
            res.send(JSON.stringify(allresourceJson, null, 4));
        });
    }
    configureAcl() {
        var acl = require('acl');
        acl = new acl(new acl.mongodbBackend(Utils.config().Config.DbConnection, "acl"));
        Utils.securityConfig().SecurityConfig.ResourceAccess.forEach(resource => {
            resource.acl.forEach(access => {
                var aclString = this.aclStringFromMask(access["accessmask"]);
                acl.allow(access["role"], resource["name"], aclString, function (err, res) {
                    if (res) {
                        console.log("User joed is allowed to view blogs");
                    }
                    if (err) {
                    }
                });
            });
        });
    }
    aclStringFromMask(mask) {
        var aclString = new Array();
        if ((mask & 1) == 1)
            aclString.push("view");
        if ((mask & 2) == 2)
            aclString.push("edit");
        if ((mask & 4) == 4)
            aclString.push("delete");
        return aclString;
    }
    getProtocol(req) {
        if (req.headers && req.headers["x-arr-ssl"]) {
            return "https";
        }
        else {
            return req.protocol;
        }
    }
}
exports.Initalize = Initalize;

//# sourceMappingURL=initialize.js.map
