{"version":3,"sources":["core/api/metadataController.ts"],"names":[],"mappings":"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","file":"core/api/metadataController.js","sourcesContent":["/// <reference path=\"../../security/auth/security-utils.ts\" />\nimport {router} from '../exports';\nimport {MetaUtils} from \"../metadata/utils\";\nimport {DecoratorType} from '../enums';\nimport * as Utils from \"../utils\";\nimport {GetRepositoryForName} from '../dynamic/dynamic-repository';\nimport {MetaData} from '../metadata/metadata';\nimport {IAssociationParams} from '../decorators/interfaces';\nimport * as Enumerable from 'linq';\nimport * as securityUtils from '../../security/auth/security-utils';\n\nexport interface metaDataObject {\n    id?: string;\n    type?: string;\n    properties?: Array<metaDataInnerObject>\n}\n\nexport interface metaDataInnerObject {\n    name?: string;\n    type?: string; //\"string\",\"number\",\"date\",\"Object\",\"Array\"\n    subtype?: string;\n    metadata?: metaDataObject\n    pathFromRoot?: Array<any>\n}\n\n\nexport interface metaDataMapping {\n    from: metaDataObject;\n    to: metaDataObject;\n    type?: string; // \"data\" default , \"name\"\n    innerMapping?: Array<metaDataMapping>\n}\n\nexport class MetadataController {\n    private path: string;\n    private metaData: { [key: string]: any } = <any>{};\n    constructor() {\n        this.path = \"/Metadata\";\n        this.AddRoutes();\n    }\n\n    private AddRoutes() {\n        router.get(this.path, securityUtils.ensureLoggedIn(), (req, res) => {\n            this.metaData['All'] = this.metaData['All'] ? this.metaData['All'] : this.getAllMetadata(req);\n            this.sendresult(req, res, this.metaData['All']);\n        });\n\n        router.get(this.path + '/:type', securityUtils.ensureLoggedIn(), (req, res) => {\n            this.sendresult(req, res, this.getMetadata(req, req.params.type));\n        });\n    }\n\n    private sendresult(req, res, result) {\n        res.set(\"Content-Type\", \"application/json\");\n\n        res.send(JSON.stringify(result, null, 4));\n    }\n\n    private getAllMetadata(req): any {\n        var metaData = {};\n        metaData['_links'] = [];\n\n        var names = Utils.getAllResourceNames();\n        Enumerable.from(names).forEach(x=> {\n            var object = {};\n            object['name'] = x;\n            object['metadata'] = this.getProtocol(req) + '://' + req.get('host') + this.path + '/' + x;\n            metaData['_links'].push(object);\n        });\n\n        return metaData;\n    }\n\n    public getMetadata(req, type): any {\n        \n        if (this.metaData[type])\n            return this.metaData[type];\n        var baseRelMeta = this.getProtocol(req) + '://' + req.get('host') + this.path + '/'\n        var metadata:any = MetaUtils.getDescriptiveMetadata(type, baseRelMeta);\n        this.metaData[type] = metadata;\n        return metadata;\n    }\n\n    private getProtocol(req) : string{\n        if(req.headers && req.headers[\"x-arr-ssl\"]){\n            return \"https\";\n        }\n        else{\n            return req.protocol;\n        }\n    }\n\n}\n\nexport default MetadataController;\n"],"sourceRoot":"/source/"}