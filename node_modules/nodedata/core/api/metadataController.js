"use strict";
/// <reference path="../../security/auth/security-utils.ts" />
const exports_1 = require('../exports');
const utils_1 = require("../metadata/utils");
const Utils = require("../utils");
const Enumerable = require('linq');
const securityUtils = require('../../security/auth/security-utils');
class MetadataController {
    constructor() {
        this.metaData = {};
        this.path = "/Metadata";
        this.AddRoutes();
    }
    AddRoutes() {
        exports_1.router.get(this.path, securityUtils.ensureLoggedIn(), (req, res) => {
            this.metaData['All'] = this.metaData['All'] ? this.metaData['All'] : this.getAllMetadata(req);
            this.sendresult(req, res, this.metaData['All']);
        });
        exports_1.router.get(this.path + '/:type', securityUtils.ensureLoggedIn(), (req, res) => {
            this.sendresult(req, res, this.getMetadata(req, req.params.type));
        });
    }
    sendresult(req, res, result) {
        res.set("Content-Type", "application/json");
        res.send(JSON.stringify(result, null, 4));
    }
    getAllMetadata(req) {
        var metaData = {};
        metaData['_links'] = [];
        var names = Utils.getAllResourceNames();
        Enumerable.from(names).forEach(x => {
            var object = {};
            object['name'] = x;
            object['metadata'] = this.getProtocol(req) + '://' + req.get('host') + this.path + '/' + x;
            metaData['_links'].push(object);
        });
        return metaData;
    }
    getMetadata(req, type) {
        if (this.metaData[type])
            return this.metaData[type];
        var baseRelMeta = this.getProtocol(req) + '://' + req.get('host') + this.path + '/';
        var metadata = utils_1.MetaUtils.getDescriptiveMetadata(type, baseRelMeta);
        this.metaData[type] = metadata;
        return metadata;
    }
    getProtocol(req) {
        if (req.headers && req.headers["x-arr-ssl"]) {
            return "https";
        }
        else {
            return req.protocol;
        }
    }
}
exports.MetadataController = MetadataController;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MetadataController;

//# sourceMappingURL=metadataController.js.map
