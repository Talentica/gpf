{"version":3,"sources":["core/metadata/utils-mock.ts"],"names":[],"mappings":"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","file":"core/metadata/utils-mock.js","sourcesContent":["import {DecoratorType} from '../enums';\nimport {Decorators, MetadataConstants} from '../constants';\nimport * as Enumerable from 'linq';\nimport {MetaRoot} from '../metadata/interfaces/metaroot';\nimport {MetaData} from '../metadata/metadata';\nimport {DecoratorMetaData} from '../metadata/interfaces/decorator-metadata';\n\nexport class Constants {\n    public static DECORATOR1 = 'decorator1';\n    public static DECORATOR2 = 'decorator2';\n    public static METHOD1 = 'method1';\n    public static METHOD2 = 'method2';\n}\n\nexport class MyTestClass1 {\n    method1(param1, param2) { }\n}\nexport class MyTestClass2 {\n    method1(param1, param2) { }\n}\nexport class MyTestClass3 {\n    method1(param1, param2) { }\n}\n\nfunction getMetaPropKey(decoratorType, propertyKey, paramIndex) {\n    let metaPropKey = propertyKey;\n    if (decoratorType === DecoratorType.CLASS || (decoratorType === DecoratorType.PARAM && !propertyKey)) {\n        metaPropKey = MetadataConstants.CLASSDECORATOR_PROPKEY;\n    }\n    if (decoratorType === DecoratorType.PARAM) {\n        metaPropKey = metaPropKey + MetadataConstants.PROPKEY_PARAMINDEX_JOIN + paramIndex;\n    }\n    return metaPropKey;\n}\n\nfunction mockDecoratorObject(obj, target, decoratorType: DecoratorType, decorator, params, propertyKey?, paramIndex?): any {\n    obj[decorator] = obj[decorator] || {};\n    let metaPropKey = getMetaPropKey(decoratorType, propertyKey, paramIndex);\n    obj[decorator][metaPropKey] = obj[decorator][metaPropKey] || {};\n    obj[decorator][metaPropKey] = mockMetadata(target, decorator, {}, propertyKey, paramIndex);\n}\n\nfunction mockMetadata(target, decorator, params, propertyKey?, paramIndex?) {\n    return new MetaData(\n        target,\n        false,\n        {\n            decorator: decorator,\n            decoratorType: DecoratorType.METHOD,\n            params: params,\n            propertyKey: propertyKey,\n            paramIndex: paramIndex\n        });\n}\n\nexport function generateMockMetaRoot() {\n    let mockMetaRoot: MetaRoot = new Map();\n    let obj = {}\n        , decorator1 = Constants.DECORATOR1\n        , decorator2 = Constants.DECORATOR2\n        , method1 = Constants.METHOD1\n        , method2 = Constants.METHOD2;\n\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.CLASS, decorator1, {});\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.CLASS, decorator2, {});\n\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.METHOD, decorator1, {}, method1);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.METHOD, decorator1, {}, method2);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.METHOD, decorator2, {}, method1);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.METHOD, decorator2, {}, method2);\n\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.PARAM, decorator1, {}, method1, 0);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.PARAM, decorator1, {}, method1, 1);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.PARAM, decorator1, {}, method2, 0);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.PARAM, decorator1, {}, method2, 1);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.PARAM, decorator2, {}, method1, 0);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.PARAM, decorator2, {}, method1, 1);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.PARAM, decorator2, {}, method2, 0);\n    mockDecoratorObject(obj, MyTestClass1.prototype, DecoratorType.PARAM, decorator2, {}, method2, 1);\n\n    mockMetaRoot.set(MyTestClass1.prototype, <any>obj);\n    //-----------------------------------------------------------------------------------------------------------------------------\n    obj = {};\n    mockDecoratorObject(obj, MyTestClass2.prototype, DecoratorType.CLASS, decorator1, {});\n    mockDecoratorObject(obj, MyTestClass2.prototype, DecoratorType.METHOD, decorator1, {}, method1);\n    mockDecoratorObject(obj, MyTestClass2.prototype, DecoratorType.PARAM, decorator1, {}, method1, 0);\n    mockDecoratorObject(obj, MyTestClass2.prototype, DecoratorType.PARAM, decorator1, {}, method1, 1);\n\n    mockMetaRoot.set(MyTestClass2.prototype, <any>obj);\n    //-----------------------------------------------------------------------------------------------------------------------------\n    return mockMetaRoot;\n}"],"sourceRoot":"/source/"}