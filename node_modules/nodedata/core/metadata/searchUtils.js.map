{"version":3,"sources":["core/metadata/searchUtils.ts"],"names":[],"mappings":";AAAA,MAAY,UAAU,WAAM,MAAM,CAAC,CAAA;AAOnC,yCAAgD,eAAoB;IAChE,oCAAoC;IACpC,SAAS;IACT,iCAAiC;IACjC,2CAA2C;IAC3C,sDAAsD;IACtD,8DAA8D;IAC9D,yCAAyC;IACzC,MAAM;IACN,UAAU;IACV,gBAAgB;IAChB,MAAM;IACN,uBAAuB;IACvB,IAAI,UAAU,GAAa,MAAM,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;IACvE,8CAA8C;IAC9C,IAAI,MAAM,GAAG,QAAQ,CAAC;IACtB,IAAI,UAAU,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC;IAC/C,IAAI,gBAAgB,GAAkB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;QACrE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IAEb,iEAAiE;IACjE,wCAAwC;IACxC,gBAAgB;IAChB,MAAM;IAEN,wGAAwG;IACxG,0DAA0D;IAC1D,gCAAgC;IAChC,0CAA0C;IAC1C,QAAQ;IAER,IAAI,WAAW,GAA8B,EAAE,CAAC;IAEhD,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,OAAO,GAAW,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YACvD,MAAM,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACb,WAAW,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,WAAW,CAAC;AACvB,CAAC;AA1Ce,uCAA+B,kCA0C9C,CAAA","file":"core/metadata/searchUtils.js","sourcesContent":["import * as Enumerable from 'linq';\n\nexport interface ISearchPropertyMap {\n    key: string;\n    args: Array<string>\n}\n\nexport function GetAllFindBySearchFromPrototype(targetProtoType: any): Array<ISearchPropertyMap> {\n    // Check if the model has any fields\n    //   if( \n    //         targetProtoType.model \n    //   &&    targetProtoType.model.prototype \n    //   &&    targetProtoType.model.prototype.decorators \n    //   &&    targetProtoType.model.prototype.decorators.field ){\n    //       console.log(\"There are fields\");\n    //   }\n    //   else{\n    //       return;\n    //   }\n    // get all model fields\n    var properties: string[] = Object.getOwnPropertyNames(targetProtoType);\n    // Get all the properties starting with findBy\n    var findBy = \"findBy\";\n    var queryRegEx = new RegExp(\"^\" + findBy, \"i\");\n    var searchProperties: Array<string> = Enumerable.from(properties).where(p=> {\n        return queryRegEx.test(p);\n    }).toArray();\n  \n    // Do all this exercise only if there is anything to search over.\n    //   if(searchProperties.length === 0 ){\n    //       return;\n    //   }\n\n    //   var fieldProperties = Object.getOwnPropertyNames(targetProtoType.model.prototype.decorators.field);\n    //   var fieldPropIter = Enumerable.from(fieldProperties);\n    //   searchProperties.every(p=>{\n    //       return fieldPropIter.contains(p);\n    //   });\n\n    var namePropMap: Array<ISearchPropertyMap> = [];\n\n    Enumerable.from(searchProperties).forEach(p=> {\n        var trimmed: string = p.substr(findBy.length, p.length);\n        var splits = Enumerable.from(trimmed.split(\"And\")).select(s => {\n            return s.toLowerCase();\n        }).toArray();\n        namePropMap.push({ key: p, args: splits });\n    });\n    return namePropMap;\n}\n"],"sourceRoot":"/source/"}