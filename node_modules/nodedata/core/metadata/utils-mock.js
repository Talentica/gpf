"use strict";
const enums_1 = require('../enums');
const constants_1 = require('../constants');
const metadata_1 = require('../metadata/metadata');
class Constants {
}
Constants.DECORATOR1 = 'decorator1';
Constants.DECORATOR2 = 'decorator2';
Constants.METHOD1 = 'method1';
Constants.METHOD2 = 'method2';
exports.Constants = Constants;
class MyTestClass1 {
    method1(param1, param2) { }
}
exports.MyTestClass1 = MyTestClass1;
class MyTestClass2 {
    method1(param1, param2) { }
}
exports.MyTestClass2 = MyTestClass2;
class MyTestClass3 {
    method1(param1, param2) { }
}
exports.MyTestClass3 = MyTestClass3;
function getMetaPropKey(decoratorType, propertyKey, paramIndex) {
    let metaPropKey = propertyKey;
    if (decoratorType === enums_1.DecoratorType.CLASS || (decoratorType === enums_1.DecoratorType.PARAM && !propertyKey)) {
        metaPropKey = constants_1.MetadataConstants.CLASSDECORATOR_PROPKEY;
    }
    if (decoratorType === enums_1.DecoratorType.PARAM) {
        metaPropKey = metaPropKey + constants_1.MetadataConstants.PROPKEY_PARAMINDEX_JOIN + paramIndex;
    }
    return metaPropKey;
}
function mockDecoratorObject(obj, target, decoratorType, decorator, params, propertyKey, paramIndex) {
    obj[decorator] = obj[decorator] || {};
    let metaPropKey = getMetaPropKey(decoratorType, propertyKey, paramIndex);
    obj[decorator][metaPropKey] = obj[decorator][metaPropKey] || {};
    obj[decorator][metaPropKey] = mockMetadata(target, decorator, {}, propertyKey, paramIndex);
}
function mockMetadata(target, decorator, params, propertyKey, paramIndex) {
    return new metadata_1.MetaData(target, false, {
        decorator: decorator,
        decoratorType: enums_1.DecoratorType.METHOD,
        params: params,
        propertyKey: propertyKey,
        paramIndex: paramIndex
    });
}
function generateMockMetaRoot() {
    let mockMetaRoot = new Map();
    let obj = {}, decorator1 = Constants.DECORATOR1, decorator2 = Constants.DECORATOR2, method1 = Constants.METHOD1, method2 = Constants.METHOD2;
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.CLASS, decorator1, {});
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.CLASS, decorator2, {});
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.METHOD, decorator1, {}, method1);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.METHOD, decorator1, {}, method2);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.METHOD, decorator2, {}, method1);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.METHOD, decorator2, {}, method2);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.PARAM, decorator1, {}, method1, 0);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.PARAM, decorator1, {}, method1, 1);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.PARAM, decorator1, {}, method2, 0);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.PARAM, decorator1, {}, method2, 1);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.PARAM, decorator2, {}, method1, 0);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.PARAM, decorator2, {}, method1, 1);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.PARAM, decorator2, {}, method2, 0);
    mockDecoratorObject(obj, MyTestClass1.prototype, enums_1.DecoratorType.PARAM, decorator2, {}, method2, 1);
    mockMetaRoot.set(MyTestClass1.prototype, obj);
    //-----------------------------------------------------------------------------------------------------------------------------
    obj = {};
    mockDecoratorObject(obj, MyTestClass2.prototype, enums_1.DecoratorType.CLASS, decorator1, {});
    mockDecoratorObject(obj, MyTestClass2.prototype, enums_1.DecoratorType.METHOD, decorator1, {}, method1);
    mockDecoratorObject(obj, MyTestClass2.prototype, enums_1.DecoratorType.PARAM, decorator1, {}, method1, 0);
    mockDecoratorObject(obj, MyTestClass2.prototype, enums_1.DecoratorType.PARAM, decorator1, {}, method1, 1);
    mockMetaRoot.set(MyTestClass2.prototype, obj);
    //-----------------------------------------------------------------------------------------------------------------------------
    return mockMetaRoot;
}
exports.generateMockMetaRoot = generateMockMetaRoot;

//# sourceMappingURL=utils-mock.js.map
