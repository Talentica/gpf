{"version":3,"sources":["core/metadata/actionUtils.ts"],"names":[],"mappings":";AAAA,MAAY,UAAU,WAAM,MAAM,CAAC,CAAA;AAOnC,mCAA0C,eAAoB;IAC1D,IAAI,UAAU,GAAa,MAAM,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;IACvE,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,IAAI,UAAU,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC;IAE/C,IAAI,gBAAgB,GAAkB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;QACrE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IAEb,IAAI,WAAW,GAA8B,EAAE,CAAC;IAChD,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,IAAI,GAAG,MAAM,CAAC,wBAAwB,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAC/D,IAAI,GAAG,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,WAAW,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,WAAW,CAAC;AACvB,CAAC;AAjBe,iCAAyB,4BAiBxC,CAAA;AAED,uBAAuB,GAAG;IACtB,IAAI,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC;SAC1D,OAAO,CAAC,uCAAuC,EAAE,EAAE,CAAC;SACpD,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACpC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;AACvD,CAAC","file":"core/metadata/actionUtils.js","sourcesContent":["import * as Enumerable from 'linq';\n\nexport interface IActionPropertyMap {\n    key: string;\n    args: Array<string>\n}\n\nexport function GetAllActionFromPrototype(targetProtoType: any): Array<IActionPropertyMap> {\n    var properties: string[] = Object.getOwnPropertyNames(targetProtoType);\n    var action = \"do\";\n    var queryRegEx = new RegExp(\"^\" + action, \"i\");\n\n    var searchProperties: Array<string> = Enumerable.from(properties).where(p => {\n        return queryRegEx.test(p);\n    }).toArray();\n\n    var namePropMap: Array<IActionPropertyMap> = [];\n    var descs = [];\n    Enumerable.from(searchProperties).forEach(x => {\n        var desc = Object.getOwnPropertyDescriptor(targetProtoType, x);\n        var arg = argumentNames(desc.value);\n        namePropMap.push({ key: x, args: arg });\n    });\n    return namePropMap;\n}\n\nfunction argumentNames(fun) {\n    var names = fun.toString().match(/^[\\s\\(]*[^(]*\\(([^)]*)\\)/)[1]\n        .replace(/\\/\\/.*?[\\r\\n]|\\/\\*(?:.|[\\r\\n])*?\\*\\//g, '')\n        .replace(/\\s+/g, '').split(',');\n    return names.length == 1 && !names[0] ? [] : names;\n}\n"],"sourceRoot":"/source/"}