"use strict";
const utils_1 = require("../metadata/utils");
const decorators_1 = require('../constants/decorators');
const decorator_type_1 = require('../enums/decorator-type');
var child_process = require('child_process');
const winstonLog_1 = require('../../logging/winstonLog');
const workerParamsDto_1 = require("./interfaces/workerParamsDto");
const configUtil = require('../utils');
const principalContext_1 = require('../../security/auth/principalContext');
var fs = require('fs');
var defaultWorkerName = "core/decorators/worker.js";
var cls = require('continuation-local-storage');
function Worker(params) {
    params = params || {};
    var session = principalContext_1.PrincipalContext.getSession();
    return function (target, propertyKey, descriptor) {
        winstonLog_1.winstonLog.logDebug("target is: " + JSON.stringify(target) + " propertyKey " + JSON.stringify(propertyKey) + " descriptor is:  " + JSON.stringify(descriptor));
        utils_1.MetaUtils.addMetaData(target, {
            decorator: decorators_1.Decorators.WORKER,
            decoratorType: decorator_type_1.DecoratorType.METHOD,
            params: params,
            propertyKey: propertyKey
        });
        var originalMethod = descriptor.value;
        winstonLog_1.winstonLog.logDebug("Input params for worker:  " + JSON.stringify(params.workerParams));
        descriptor.value = preProcessHandler(params, target, propertyKey, descriptor, originalMethod, decorators_1.Decorators.WORKER);
    };
    function getDebugOption() {
        var execArgv = process.execArgv.slice(); //create args shallow copy
        var debugPort = process.debugPort + 1;
        for (var i = 0; i < execArgv.length; i++) {
            var match = execArgv[i].match(/^(--debug|--debug-brk)(=\d+)?$/);
            if (match) {
                execArgv[i] = match[1] + '=' + debugPort;
                break;
            }
        }
        //var options = { env: process.env,  silent:false, execArgv: execArgv, cwd: targetProcessCwd };
        var options = { env: process.env, silent: false, execArgv: execArgv };
        return options;
    }
    function preProcessHandler(params, target, propertyKey, descriptor, originalMethod, type) {
        return function () {
            if (utils_1.MetaUtils.childProcessId || !configUtil.config().Config.isMultiThreaded) {
                winstonLog_1.winstonLog.logInfo("Executing method from child Process with id: " + process.pid);
                return originalMethod.apply(this, arguments);
            }
            var meta = utils_1.MetaUtils.getMetaData(target, type, propertyKey);
            var targetObjectId;
            if (params.indexofArgumentForTargetObjectId)
                targetObjectId = arguments[params.indexofArgumentForTargetObjectId];
            if (params.indexofArgumentForTargetObject)
                targetObjectId = arguments[params.indexofArgumentForTargetObject]._id;
            var serviceName, servicemethodName, paramsArguments;
            var name = params.name;
            var workerParams = new workerParamsDto_1.workerParamsDto();
            if (params.workerParams == null) {
                winstonLog_1.winstonLog.logInfo("No Params sent with Worker()");
                workerParams.workerName = defaultWorkerName; //default service to be executed.
                winstonLog_1.winstonLog.logInfo("Calling Default worker:  " + workerParams.workerName);
                serviceName = this.__proto__.constructor.name;
                workerParams.serviceName = serviceName;
                servicemethodName = propertyKey;
                workerParams.servicemethodName = servicemethodName;
                paramsArguments = arguments;
                workerParams.arguments = paramsArguments;
            }
            else {
                if (!params.workerParams.workerName) {
                    workerParams.workerName = defaultWorkerName;
                    winstonLog_1.winstonLog.logInfo("Calling Default worker:  " + workerParams.workerName);
                }
                else {
                    workerParams.workerName = params.workerParams.workerName;
                    winstonLog_1.winstonLog.logInfo("Calling worker:  " + workerParams.workerName);
                }
                if (params.workerParams.serviceName != null && params.workerParams.serviceName != '') {
                    serviceName = params.workerParams.serviceName;
                    workerParams.serviceName = serviceName;
                }
                else {
                    serviceName = this.__proto__.constructor.name;
                    workerParams.serviceName = serviceName;
                }
                if (params.workerParams.servicemethodName != null && params.workerParams.servicemethodName != '') {
                    servicemethodName = params.workerParams.servicemethodName;
                    workerParams.servicemethodName = servicemethodName;
                }
                else {
                    servicemethodName = propertyKey;
                    workerParams.servicemethodName = servicemethodName;
                }
                if (params.workerParams.arguments != null && params.workerParams.arguments != '') {
                    paramsArguments = params.workerParams.arguments;
                    workerParams.arguments = paramsArguments;
                }
                else {
                    paramsArguments = arguments;
                    workerParams.arguments = paramsArguments;
                }
            }
            workerParams.arguments = Array.prototype.slice.call(workerParams.arguments);
            workerParams.arguments = workerParams.arguments.slice(0, originalMethod.length);
            winstonLog_1.winstonLog.logInfo("Worker Params: " + JSON.stringify(workerParams));
            if (workerParams.serviceName != null) {
                console.log("Forking a new child_process: " + workerParams.workerName);
                var workerProcess = child_process.fork(workerParams.workerName, [], getDebugOption());
                //if(session!=null){   // Setting principalContext on the worker params;
                principalContext_1.PrincipalContext.save('workerParams', JSON.stringify(workerParams));
                workerParams.principalContext = principalContext_1.PrincipalContext.getAllKeyValues();
                if (workerParams.principalContext['req']) {
                    delete workerParams.principalContext['req'];
                }
                if (workerParams.principalContext['res']) {
                    delete workerParams.principalContext['res'];
                }
                winstonLog_1.winstonLog.logDebug("Context at Worker: " + JSON.stringify(workerParams.principalContext));
                winstonLog_1.winstonLog.logInfo("PrincipalConext at Parent: " + JSON.stringify(principalContext_1.PrincipalContext.getSession()));
                //}
                if (workerProcess.error == null) {
                    winstonLog_1.winstonLog.logInfo('Child process created with id: ' + workerProcess.pid);
                    workerProcess.on('message', function (message) {
                        winstonLog_1.winstonLog.logInfo('message from Child Process : ' + JSON.stringify(message));
                    });
                    workerProcess.on('error', function (err) {
                        winstonLog_1.winstonLog.logError('Error : ' + err);
                    });
                    workerProcess.on('close', function (code, signal) {
                        winstonLog_1.winstonLog.logInfo('Child process exited with code: ' + code + ' signal: ' + signal);
                    });
                    workerProcess.send({ workerParams: workerParams, message: "new child process created with id: " + workerProcess.pid
                    });
                }
                else {
                    winstonLog_1.winstonLog.logError("Error during creating child Process: " + workerProcess.error);
                }
            }
            return descriptor;
        };
    }
}
exports.Worker = Worker;

//# sourceMappingURL=workerAssociation.js.map
