{"version":3,"sources":["core/decorators/postfilter.ts"],"names":[],"mappings":";AAAA,wBAAwB,mBAAmB,CAAC,CAAA;AAC5C,MAAY,KAAK,WAAM,UAAU,CAAC,CAAA;AAClC,6BAAyB,yBAAyB,CAAC,CAAA;AACnD,iCAA4B,yBAAyB,CAAC,CAAA;AAEtD,qDAAqD;AACrD,sCAAgC,iCAAiC,CAAC,CAAA;AAElE,oBAA2B,MAAyB;IAChD,MAAM,GAAG,MAAM,IAAS,EAAE,CAAC;IAE3B,MAAM,CAAC,UAAU,MAAgB,EAAE,WAAmB,EAAE,UAAe;QACnE,iBAAS,CAAC,WAAW,CAAC,MAAM,EACxB;YACI,SAAS,EAAE,uBAAU,CAAC,UAAU;YAChC,aAAa,EAAE,8BAAa,CAAC,MAAM;YACnC,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,WAAW;SAC3B,CAAC,CAAC;QAEP,IAAI,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QAEtC,UAAU,CAAC,KAAK,GAAG;YACf,IAAI,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACnD,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA,CAAC;gBACzB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG;oBAClB,MAAM,CAAC,uCAAiB,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;gBACrD,CAAC,CAAC,CAAC;YACP,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,MAAM,CAAC,uCAAiB,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACxD,CAAC;QACL,CAAC,CAAA;QACD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC,CAAC;AACN,CAAC;AA3Be,kBAAU,aA2BzB,CAAA","file":"core/decorators/postfilter.js","sourcesContent":["import {MetaUtils} from \"../metadata/utils\";\nimport * as Utils from \"../utils\";\nimport {Decorators} from '../constants/decorators';\nimport {DecoratorType} from '../enums/decorator-type';\nimport {IPostfilterParams} from './interfaces/postfilter-params';\n//var domain = require('../../security/auth/domain');\nimport {PostFilterService} from '../services/post-filter-service';\n\nexport function postfilter(params: IPostfilterParams): any {\n    params = params || <any>{};\n\n    return function (target: Function, propertyKey: string, descriptor: any) {\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.POSTFILTER,\n                decoratorType: DecoratorType.METHOD,\n                params: params,\n                propertyKey: propertyKey\n            });\n\n        var originalMethod = descriptor.value;\n\n        descriptor.value = function () {\n            var result = originalMethod.apply(this, arguments);\n            if (Utils.isPromise(result)){\n                return result.then(ret => {\n                    return PostFilterService.postFilter(ret, params);\n                });\n            }\n            else {\n                return PostFilterService.postFilter(result, params);\n            }\n        }\n        return descriptor;\n    };\n}\n"],"sourceRoot":"/source/"}