{"version":3,"sources":["core/decorators/promisable.ts"],"names":[],"mappings":"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","file":"core/decorators/promisable.js","sourcesContent":["import {MetaUtils} from \"../metadata/utils\";\nimport {Decorators} from '../constants/decorators';\nimport {DecoratorType} from '../enums/decorator-type';\nimport * as Utils from '../../mongoose/utils';\nimport * as CoreUtils from \"../utils\";\nimport {getEntity, getModel} from '../../core/dynamic/model-entity';\nimport * as Enumerable from 'linq';\nimport {MetaData} from '../../core/metadata/metadata';\nimport {IAssociationParams} from '../../core/decorators/interfaces';\nimport {IFieldParams, IDocumentParams} from '../../mongoose/decorators/interfaces';\nimport {IDynamicRepository, GetRepositoryForName} from '../dynamic/dynamic-repository';\nimport Q = require('q');\n\n\nexport function promisable(params: IPromisableParam): any {\n    params = params || <any>{};\n    return function (target: Object, propertyKey: string, parameterIndex?: number) {\n\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.PROMISABLE,\n                decoratorType: DecoratorType.PROPERTY,\n                params: params,\n                propertyKey: propertyKey\n            });\n         \n        var getter = function (refresh: boolean) {\n\n            // find the target property from params.targetKey\n            // find the relavent repository from the relationship and fetch all entity data from db\n            var allReferencingEntities: Array<MetaData> = CoreUtils.getAllRelationsForTargetInternal(getEntity(this.constructor.name))\n            let targetProperties = allReferencingEntities.filter((x: MetaData) => x.propertyKey === params.targetKey);\n            if (!targetProperties) {\n                return Q.reject(`the targer property ${params.targetKey} either does not exist or does not have any relationship asscociated with it.`);\n            }\n\n            let targerPropertyMeta: MetaData = targetProperties[0];\n            let ghostKey = \"__ghostKey_\" + params.targetKey;\n            let ghostKeyData = undefined;\n\n            //// if target property already have object filled then no need to fetch again\n            //if (targerPropertyMeta.params.embedded || targerPropertyMeta.params.eagerLoading) {\n            //    return Q.when(this[params.targetKey]);\n            //}\n\n            if (!refresh && this[ghostKey]) {\n                return this[ghostKey];\n            }\n\n            let repo = GetRepositoryForName(targerPropertyMeta.params.rel);\n            if (!repo) {\n                return Q.reject(`the targer property ${params.targetKey}'s model's repository does not exist.`);\n            }\n\n            if (!Object.getOwnPropertyDescriptor(this, ghostKey)) {\n\n                Object.defineProperty(this, ghostKey, {\n                    get: () => {\n                        return ghostKeyData;\n                    },\n                    set: (val) => {\n                        ghostKeyData = val;\n                    }\n                });\n            }\n\n            // case for onetomany, manytomany relationship type\n            if (targerPropertyMeta.propertyType.isArray) {\n                let ids = [];\n                if (!this[params.targetKey] || !this[params.targetKey].length) {\n                    return Q.when([]);\n                }\n                if (Utils.isBasonOrStringType(this[params.targetKey][0])) {\n                    ids = this[params.targetKey];\n                }\n                else {\n                    ids = this[params.targetKey].map(x => x._id);\n                }\n                return repo.getRootRepo().findMany(ids, true).then(results => {\n                    this[ghostKey] = results;\n                    return Q.when(results);\n                }).catch(exc => {\n                    return Q.reject(exc);\n                });\n            }\n            // case for onetoone, manytoone relationship type\n            else {\n                let id = \"\";\n                if (!this[params.targetKey]) {\n                    Q.when({});\n                }\n                if (Utils.isBasonOrStringType(this[params.targetKey])) {\n                    id = this[params.targetKey];\n                }\n                else {\n                    id = this[params.targetKey]._id;\n                }\n                return repo.getRootRepo().findOne(id).then(result => {\n                    this[ghostKey] = result;\n                    return Q.when(result);\n                }).catch(exc => {\n                    return Q.reject(exc);\n                });;\n            }\n        };\n\n        target[propertyKey] = getter;\n\n    };\n\n\n\n}\n\nexport interface IPromisableParam {\n    targetKey: string;\n}"],"sourceRoot":"/source/"}