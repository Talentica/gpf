{"version":3,"sources":["core/decorators/worker.ts"],"names":[],"mappings":"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","file":"core/decorators/worker.js","sourcesContent":["require(\"reflect-metadata/Reflect\");\nimport * as express from \"express\";\nimport * as Config from \"../../config\";\nimport * as securityConfig from \"../../security-config\";\nimport {router} from \"../exports\";\nimport * as data from \"../../mongoose\";\nimport { Decorators } from '../constants/decorators';\nimport { DecoratorType } from '../enums/decorator-type';\nimport { MetaUtils } from \"../metadata/utils\";\nimport {MetaData, IMetaOptions} from \"../metadata/metadata\" ;\nimport {CurrentUserDetailService} from \"../../current-user-detail-service\";\nimport {UserDetailService} from \"../../security/auth/user-detail-service\";\nimport {PrincipalContext} from '../../security/auth/principalContext';\nimport * as Enumerable from 'linq';\nimport * as Utils from \"../utils\";\nimport {winstonLog} from '../../logging/winstonLog';\nimport {Container} from '../../di';\nimport {responseDetails} from './interfaces/response';\n//var domain = require('../../security/auth/domain');\n//var cls = require('continuation-local-storage');\n\n\nvar serverUp= function(){\n    winstonLog.logInfo(\"+++++++++++++++++++ =======\\n +++++++++++ Wroker executed +++++++++++ \\n +++++++++++++++++++ =======\");\n    const app = express();\n    const Main = require(\"../../core\");\n    Config.Config.ignorePaths= Config.Config.ignorePaths || [];\n    Config.Config.ignorePaths.push('**/server.js','**/worker.js')\n    Main(Config, securityConfig, __dirname, data.entityServiceInst);\n    const test = require('../../unit-test/services/blogServiceImpl'); // Test Service i.e. BlogService required for testing in Jasmine.\n    data.connect();\n    data.generateSchema();\n    app.use(\"/\", router);\n    Main.register(app);\n}\n\nprocess.on('message', function (m) {\n  var response: responseDetails = new responseDetails();  \n    try{  \n    serverUp(); // Prepares the server.\n        \nPrincipalContext.getSession().run(function(){\n    \n    MetaUtils.childProcessId = process.pid;\n    winstonLog.logInfo(\"Input from Parent Process : \"+JSON.stringify(m));\n \n  \n    if( m.workerParams != null) {\n        var services = MetaUtils.getMetaDataForDecorators([Decorators.SERVICE]);\n        //console.log(\"Services: \"+ JSON.stringify(services));\n        var serviceName=m.workerParams.serviceName;\n        var principalContext=m.workerParams.principalContext;\n      \n        //Setting up Principal context for the new process.\n        for(var i in  principalContext){\n            var key=i;\n            var val= principalContext[i];\n            PrincipalContext.save(key,val);\n        }\n        //winstonLog.logInfo(\"PrincipalContext at worker : \"+ JSON.stringify(PrincipalContext.getSession()));  \n        \n        //winstonLog.logDebug(\" All Available Services : \"+ JSON.stringify(services) + \" service: \"+ service_name);\n        var service=Enumerable.from(services).where(x => x.metadata[0].target.constructor.name == serviceName).select(x => x.metadata[0]).firstOrDefault();\n        winstonLog.logInfo(\"Target Service with content : \"+ JSON.stringify(service));\n        if(service){\n            var injectedProp = Container.resolve(service.params.target);\n            winstonLog.logDebug('Service instance: '+injectedProp);\n            var methodName=m.workerParams.servicemethodName;\n            winstonLog.logDebug(\"Method Names: \"+ JSON.stringify(methodName));\n            var methodArguments=m.workerParams.arguments;\n            winstonLog.logDebug(\"arugment Names: \"+ methodArguments);\n            var ret = injectedProp[methodName].apply(injectedProp,methodArguments);\n            if (Utils.isPromise(ret)) {\n                 ret.then(res=>{\n                    console.log(\"Target Method executed\");\n                    response.message=\"Target Method executed\";\n                    response.status=\"success\";\n                   // process.send(\"Target Method executed and result is \" + JSON.stringify(res),);\n                     process.send(JSON.stringify(response));\n                    process.exit();\n                 });\n                }else {\n                //return Q.when(true);\n                response.message=\"Method could not be executed\";\n                response.status=\"failure\";\n                response.error=JSON.stringify(ret);\n                process.send(JSON.stringify(response));\n                //process.send(\"Method could not be executed and error is \" + JSON.stringify(ret));\n                process.exit();\n            }\n        }\n        else{\n        response.message=\"No service found.\";\n        response.status=\"failure\";\n        process.send(JSON.stringify(response));\n        //process.send(\"No service found.\");\n        process.exit();\n        }\n     }else{\n         response.message=\"Worker param is null\";\n         response.status=\"failure\";\n         process.send(JSON.stringify(response));\n         //process.send(\"Worker param is null. Exiting.... \");\n         process.exit();\n     }\n\n})\n    }catch(error){\n         response.message=\"Error found:\";\n         response.status=\"failure\";\n         response.error=error;\n         process.send(response);\n        //winstonLog.logError(\"Error found: \"+ error);\n        process.exit();\n    }\n });"],"sourceRoot":"/source/"}