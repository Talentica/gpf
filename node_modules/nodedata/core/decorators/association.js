"use strict";
const constants_1 = require('../constants');
const enums_1 = require('../enums');
const param_type_custom_1 = require('../metadata/param-type-custom');
const utils_1 = require("../metadata/utils");
const ReflectUtils = require('../reflect/reflect-utils');
function onetomany(params) {
    return (target, propertyKey) => addMetadata(target, propertyKey, constants_1.Decorators.ONETOMANY, params);
}
exports.onetomany = onetomany;
function manytoone(params) {
    return (target, propertyKey) => addMetadata(target, propertyKey, constants_1.Decorators.MANYTOONE, params);
}
exports.manytoone = manytoone;
function manytomany(params) {
    return (target, propertyKey) => addMetadata(target, propertyKey, constants_1.Decorators.MANYTOMANY, params);
}
exports.manytomany = manytomany;
function onetoone(params) {
    return (target, propertyKey) => addMetadata(target, propertyKey, constants_1.Decorators.ONETOONE, params);
}
exports.onetoone = onetoone;
function addMetadata(target, propertyKey, decorator, params) {
    params = params || {};
    var name = target.constructor.name;
    console.log(decorator, ' - propertyKey: ', propertyKey, ', target:', target.constructor && target.constructor.name);
    let itemType = ReflectUtils.getDesignType(target, propertyKey);
    let type = (params && params.itemType)
        ? new param_type_custom_1.ParamTypeCustom(params.itemType, itemType === Array)
        : new param_type_custom_1.ParamTypeCustom(itemType, false);
    utils_1.MetaUtils.addMetaData(target, {
        decorator: decorator,
        decoratorType: enums_1.DecoratorType.PROPERTY,
        params: params,
        propertyKey: propertyKey,
        type: type
    });
}

//# sourceMappingURL=association.js.map
