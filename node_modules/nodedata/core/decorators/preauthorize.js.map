{"version":3,"sources":["core/decorators/preauthorize.ts"],"names":[],"mappings":"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","file":"core/decorators/preauthorize.js","sourcesContent":["import {MetaUtils } from \"../metadata/utils\";\nimport {Decorators} from '../constants/decorators';\nimport {DecoratorType} from '../enums/decorator-type';\nimport {IPreauthorizeParams} from './interfaces/preauthorize-params';\nimport {PrincipalContext} from '../../security/auth/principalContext';\nimport {PreAuthService} from '../services/pre-auth-service';\nimport {pathRepoMap, getEntity} from '../dynamic/model-entity';\nimport {InstanceService} from '../services/instance-service';\nimport * as Utils from '../utils';\nimport {RepoActions} from '../enums/repo-actions-enum';\nimport * as Enumerable from 'linq';\nimport Q = require('q');\n\nexport function preauthorize(params: IPreauthorizeParams): any {\n    params = params || <any>{};\n\n    return function (target: Function, propertyKey: string, descriptor: any) {\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.PREAUTHORIZE,\n                decoratorType: DecoratorType.METHOD,\n                params: params,\n                propertyKey: propertyKey\n            });\n\n        var originalMethod = descriptor.value;\n\n        descriptor.value = function () {\n            var anonymous = MetaUtils.getMetaData(target, Decorators.ALLOWANONYMOUS, propertyKey);\n            if (anonymous) return originalMethod.apply(this, arguments);\n            let args = [];\n            args = Array.apply(null, arguments);\n\n            // merge logic\n            return mergeTask.apply(this, [args, originalMethod]).then(fullyQualifiedEntities => {\n                return PreAuthService.isPreAuthenticated([fullyQualifiedEntities], params, propertyKey).then(isAllowed => {\n                    //req.body = fullyQualifiedEntities;\n                    if (isAllowed) {\n                        // for delete, post action no need to save merged entity else save merged entity to db\n                        if (originalMethod.name.toUpperCase() != RepoActions.delete.toUpperCase() && originalMethod.name.toUpperCase() != RepoActions.patch.toUpperCase()) {\n                            args[args.length - 1] = fullyQualifiedEntities;\n                        }\n                        return originalMethod.apply(this, args);\n                        //return originalMethod.apply(this, [fullyQualifiedEntities]);\n                    }\n                    else {\n                        var error = 'unauthorize access for resource';\n                        var res = PrincipalContext.get('res');\n                        if (res) {\n                            res.set(\"Content-Type\", \"application/json\");\n                            res.send(403, JSON.stringify(error, null, 4));\n                        }\n                        throw null;\n                    }\n                });\n            });\n        }\n        return descriptor;\n    }\n}\n\nfunction mergeTask(args: any, method: any): Q.Promise<any> {\n    let prom: Q.Promise<any>;\n    var response = [];\n    switch (method.name.toUpperCase()) {\n        case RepoActions.post.toUpperCase():\n            // do nothing\n            prom = Q.when(InstanceService.getInstance(this.getEntity(), null, args[0]));\n            break;\n        case RepoActions.put.toUpperCase():\n        case RepoActions.patch.toUpperCase():\n            // fetch single object\n            prom = this.findMany([args[0]]).then(res => {\n                return mergeProperties(res[0], args[1]);\n            });\n            break;\n        case RepoActions.delete.toUpperCase():\n            // fetch single object \n            prom = this.findMany([args[0]]).then(res => {\n                return res[0];\n            });\n            break;\n        case RepoActions.bulkPost.toUpperCase():\n            args[0].forEach(x => {\n                response.push(InstanceService.getInstance(this.getEntity(), null, x));\n            });\n            prom = Q.when(response);\n            break;\n        case RepoActions.bulkPut.toUpperCase():\n            var ids = Enumerable.from(args[0]).select(x => x['_id'].toString()).toArray();\n            prom = this.findMany(ids).then(dbEntities => {\n                return mergeEntities(dbEntities, args[0]);\n            });\n            break;\n        case RepoActions.bulkDel.toUpperCase():\n            if (args[0].length > 0) {\n                var ids = [];\n                Enumerable.from(args[0]).forEach(x => {\n                    if (Utils.isJSON(x)) {\n                        ids.push(x['_id']);\n                    }\n                    else {\n                        ids.push(x);\n                    }\n                });\n                prom = this.findMany(ids).then(dbEntities => {\n                    return dbEntities;\n                });\n            }\n            else {\n                prom = Q.when(args[0]);\n            }\n            break;\n        default:\n            prom = Q.when(args[0]);\n            break;\n    }\n    return prom.then(res => {\n        return res;\n    }).catch(exc => {\n        console.log(exc);\n        throw exc;\n    });\n}\n\nfunction mergeEntities(dbEntities, entities) {\n    var res = [];\n    Enumerable.from(entities).forEach(entity => {\n        var dbEntity = Enumerable.from(dbEntities).where(x => x['_id'] == entity['_id']).firstOrDefault();\n        if (dbEntity) {\n            res.push(mergeProperties(dbEntity, entity));\n        }\n        else {\n            res.push(entity);\n        }\n    });\n    return res;\n}\n\nfunction mergeProperties(dbEntity, entity) {\n    for (var prop in entity) {\n        dbEntity[prop] = entity[prop];\n    }\n    return dbEntity;\n}\n\n"],"sourceRoot":"/source/"}