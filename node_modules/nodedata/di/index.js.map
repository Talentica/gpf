{"version":3,"sources":["di/index.ts"],"names":[],"mappings":";AAAA,MAAY,EAAE,WAAM,MACpB,CAAC,CADyB;AAC1B,0BAA4B,iBAC5B,CAAC,CAD4C;AAG7C,IAAI,UAAU,GAAG,UAAU,MAAsB;IAC7C,IAAI,IAAI,CAAC;IACT,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACV,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACD,MAAM,CAAC,IAAI,CAAC,uBAAa,EAAE,CAAC;SACvB,OAAO,CAAC,CAAC;QACN,wEAAwE;QACxE,IAAI,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;QACjC,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC;QAC5C,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACb,IAAI,GAAG,uBAAa,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACnC,CAAC;QACD,qJAAqJ;QACrJ,qCAAqC;QACrC,GAAG;IACP,CAAC,CAAC,CAAC;IACP,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC,CAAA;AAED,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AAExB,iBAAS,GAAkB,EAAE,CAAC,SAAS,CAAC","file":"di/index.js","sourcesContent":["import * as DI from './di'\nimport {repositoryMap} from '../core/exports'\nimport {ClassType} from '../core/utils/classtype';\n\nlet repoSource = function (target: ClassType<any>) {\n    let repo;\n    if (!target) {\n        return null;\n    }\n    Object.keys(repositoryMap())\n        .forEach(x => {\n            //// TODO: Decide repository map will hold the prototype or the function\n            var path;\n            if (target.prototype) {\n                path = target.prototype.path;\n            }\n            else if (target['default']) {\n                path = target['default'].prototype.path;\n            }\n            if (path === x) {\n                repo = repositoryMap()[x].repo;\n            }\n            //if (repositoryMap()[x].fn === target || <Function>repositoryMap()[x].fn === target.prototype|| (target.prototype && x === target.prototype.path)) {\n            //    repo = repositoryMap()[x].repo;\n            //}\n        });\n    return repo;\n}\n\nDI.Container.addSource(repoSource);\n\nexport let Container: DI.IContainer = DI.Container;\n"],"sourceRoot":"/source/"}