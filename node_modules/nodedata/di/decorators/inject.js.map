{"version":3,"sources":["di/decorators/inject.ts"],"names":[],"mappings":"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","file":"di/decorators/inject.js","sourcesContent":["import {MetaUtils} from '../../core/metadata/utils';\nimport * as Utils from '../../core/utils';\nimport {Decorators} from '../../core/constants';\nimport {DecoratorType} from '../../core/enums/decorator-type';\nimport {Container} from '../';\nimport {MetaData} from '../../core/metadata/metadata';\nimport {ClassType} from '../../core/utils/types';\nlet Enumerable: any = require('linq');\nimport {winstonLog} from '../../logging/winstonLog';\n\nexport function inject(injectType?) {\n\n    function getInjectType(target, propertyKey, parameterIndex, decoratorType: DecoratorType) {\n        if (injectType) {\n            return injectType;\n        }\n        let type;\n        if (decoratorType === DecoratorType.PARAM) {\n            var paramTypes: Array<any> = Utils.getDesignParamType(target, propertyKey, parameterIndex);\n            type = paramTypes && paramTypes.length && parameterIndex < paramTypes.length\n                ? paramTypes[parameterIndex]\n                : null;\n        } else if (decoratorType === DecoratorType.PROPERTY) {\n            type = Utils.getDesignType(target, propertyKey);\n        } else {\n            winstonLog.logError(`Error in Injection`);\n            throw 'Error';\n        }\n        if (!type) {\n            winstonLog.logError(`Error in Injection: inject type cannot be null ${target}`);\n            console.log(target);\n            throw 'inject type cannot be null';\n        }\n        return type;\n    }\n\n    return function (target: Object | Function, propertyKey: string, parameterIndex?: number) {\n        // param decorator\n        if (arguments.length === 3) {\n            MetaUtils.addMetaData(target,\n                {\n                    decorator: Decorators.INJECT,\n                    decoratorType: DecoratorType.PARAM,\n                    params: { type: getInjectType(target, propertyKey, parameterIndex, DecoratorType.PARAM) },\n                    propertyKey: propertyKey,\n                    paramIndex: parameterIndex\n                });\n            return;\n        }\n        // property decorator\n        else {\n            injectType = getInjectType(target, propertyKey, parameterIndex, DecoratorType.PROPERTY);\n            let injectedProp = null;\n            // property getter\n            var getter = function () {\n                if (!injectedProp) {\n                    injectedProp = Container.resolve(injectType);\n                    //__o.propertyKey = typeof target === 'object'\n                    //    ? container.resolve(injectType) // if target is the prototype (in case of public|private)\n                    //    : container.resolve(<any>target); // if target is a function (in case of static)\n                }\n                return injectedProp;\n            };\n\n            var setter = function (value) {\n                injectedProp = value;\n            };\n\n            // Delete property.\n            if (!(delete target[propertyKey])) {\n                winstonLog.logError(`Error in Injection: Invalid property inject`);\n                throw \"Invalid property inject\";\n            }\n            // Create new property with getter and setter\n            Object.defineProperty(target, propertyKey, {\n                get: getter,\n                set: setter,\n                enumerable: true,\n                configurable: true\n            });\n\n            MetaUtils.addMetaData(target,\n                {\n                    decorator: Decorators.INJECT,\n                    decoratorType: DecoratorType.PROPERTY,\n                    params: { type: injectType },\n                    propertyKey: propertyKey\n                });\n        }\n    }\n}\n\nexport function injectbyname(injectName?) {\n    return function (target: Object | Function, propertyKey: string, parameterIndex?: number) {\n        var injectType = Utils.getDesignType(target, propertyKey);\n        // property getter\n        let injectedProp = null;\n\n        var getter = function () {\n            if (!injectedProp) {\n                var metas = MetaUtils.getMetaDataForDecorators([Decorators.SERVICE]);\n                var meta: MetaData = Enumerable.from(metas).where(x => x.metadata[0].params.serviceName == injectName).select(x => x.metadata[0]).firstOrDefault();\n                //injectType = Utils.getDesignParamType(meta.target, undefined);\n                injectedProp = Container.resolve(meta.params.target);\n                //__o.propertyKey = typeof target === 'object'\n                //    ? container.resolve(injectType) // if target is the prototype (in case of public|private)\n                //    : container.resolve(<any>target); // if target is a function (in case of static)\n            }\n            return injectedProp;\n        };\n\n        var setter = function (value) {\n            injectedProp = value;\n        };\n\n        // Delete property.\n        if (!(delete target[propertyKey])) {\n            winstonLog.logError(`Error in Injection: Invalid property inject`);\n            throw \"Invalid property inject\";\n        }\n        // Create new property with getter and setter\n        Object.defineProperty(target, propertyKey, {\n            get: getter,\n            set: setter,\n            enumerable: true,\n            configurable: true\n        });\n\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.INJECT,\n                decoratorType: DecoratorType.PROPERTY,\n                params: { type: injectType },\n                propertyKey: propertyKey\n            });\n    }\n}"],"sourceRoot":"/source/"}