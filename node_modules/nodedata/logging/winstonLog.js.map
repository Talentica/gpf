{"version":3,"sources":["logging/winstonLog.ts"],"names":[],"mappings":";AAAA,MAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AAEpC;IACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACxB,UAAU,EAAE;YACR,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;SAErC;KACJ,CAAC,CAAC;AACP,CAAC;AAED;;GAEG;AACH;IAGI;QAFA,kBAAa,GAAG,IAAI,CAAC;QACrB,cAAS,GAAG,IAAI,CAAC;QAEb,IAAI,CAAC,aAAa,GAAG,SAAS,EAAE,CAAC;QACjC,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG;YACb,KAAK,EAAG,UAAS,OAAO,EAAE,QAAQ;gBAC9B,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3B,CAAC;SACJ,CAAA;IACL,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,OAAY,EAAE,IAAW;QAC7B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,OAAY,EAAE,IAAW;QAC9B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,OAAY,EAAE,IAAW;QAC9B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,SAAS,CAAC,OAAW;QACjB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,SAAS;QACL,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;AACL,CAAC;AAED,IAAI,UAAU,GAAG,IAAI,UAAU,EAAE;AACzB,kBAAU,cADgB;AACd","file":"logging/winstonLog.js","sourcesContent":["import winston = require('winston');\n\nfunction getLogger(): winston.LoggerInstance {\n    return new (winston.Logger)({\n        transports: [\n            new (winston.transports.Console)()\n\t\t\t//,new (winston.transports.File)({ filename: 'nodedataLog.log', json: true})\n        ]\n    });\n}\n\n/**\n * A wrapper around the winston logging framework.\n */\nclass WinstonLog {\n    winstonLogger = null;\n    logStream = null;\n    constructor() {\n        this.winstonLogger = getLogger();\n        var _logger = this.winstonLogger;\n        this.logStream = {\n            write : function(message, encoding){\n                _logger.debug(message);\n            }\n        }\n    }\n\n    /**\n     * Logs the message as info.\n     * @param message The message to be logged.\n     * @param meta Any additional metadata.\n     */\n    logInfo(message: any, meta? : any) {\n        this.winstonLogger.log('info', message, meta);\n    }\n\n    /**\n     * Logs the message as Debug\n     * @param message The message to be logged\n     * @param meta Any additional metadata\n     */\n    logDebug(message: any, meta? : any) {\n        this.winstonLogger.log('debug', message, meta);\n    }\n\n    /**\n     * Logs the message as Erro\n     * @param message The message to be logged\n     * @param meta Any additional metadata\n     */\n    logError(message: any, meta? : any) {\n        this.winstonLogger.log('error', message, meta);\n    }\n\n    configure(options:any){\n        this.winstonLogger.configure(options);\n    }\n\n    getStream(){\n        return this.logStream;\n    }\n}\n\nvar winstonLog = new WinstonLog();\nexport {winstonLog};"],"sourceRoot":"/source/"}