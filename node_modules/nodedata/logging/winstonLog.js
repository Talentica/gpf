"use strict";
const winston = require('winston');
function getLogger() {
    return new (winston.Logger)({
        transports: [
            new (winston.transports.Console)()
        ]
    });
}
/**
 * A wrapper around the winston logging framework.
 */
class WinstonLog {
    constructor() {
        this.winstonLogger = null;
        this.logStream = null;
        this.winstonLogger = getLogger();
        var _logger = this.winstonLogger;
        this.logStream = {
            write: function (message, encoding) {
                _logger.debug(message);
            }
        };
    }
    /**
     * Logs the message as info.
     * @param message The message to be logged.
     * @param meta Any additional metadata.
     */
    logInfo(message, meta) {
        this.winstonLogger.log('info', message, meta);
    }
    /**
     * Logs the message as Debug
     * @param message The message to be logged
     * @param meta Any additional metadata
     */
    logDebug(message, meta) {
        this.winstonLogger.log('debug', message, meta);
    }
    /**
     * Logs the message as Erro
     * @param message The message to be logged
     * @param meta Any additional metadata
     */
    logError(message, meta) {
        this.winstonLogger.log('error', message, meta);
    }
    configure(options) {
        this.winstonLogger.configure(options);
    }
    getStream() {
        return this.logStream;
    }
}
var winstonLog = new WinstonLog();
exports.winstonLog = winstonLog;

//# sourceMappingURL=winstonLog.js.map
