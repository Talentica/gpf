{"version":3,"sources":["server.ts"],"names":[],"mappings":";AAAA,oBAAoB;AACpB,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAC5B,MAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,MAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AACpC,IAAI,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACxC,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC;AACvD,MAAY,MAAM,WAAM,UAAU,CAAC,CAAA;AACnC,MAAY,cAAc,WAAM,0BAA0B,CAAC,CAAA;AAC3D,0BAAqB,uBAAuB,CAAC,CAAA;AAG7C,+BAA6B,yBAAyB,CAAC,CAAA;AAEvD,MAAY,IAAI,WAAM,mBAAmB,CAAC,CAAA;AAC1C,yDAAyD;AACzD,MAAY,OAAO,WAAO,uBAAuB,CAAC,CAAA;AAClD,IAAI,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACpC,IAAI,CAAC,MAAM,EAAE,cAAc,EAAE,SAAS,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1F,oHAAoH;AACpH,IAAI,CAAC,OAAO,EAAE,CAAC;AACf,IAAI,CAAC,cAAc,EAAE,CAAC;AACtB,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;AACnC,OAAO,CAAC,cAAc,EAAE,CAAC;AAEzB,IAAI,GAAG,GAAG,OAAO,EAAE,CAAC;AACpB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACnB,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,GAAG,QAAQ,CAAC,CAAC;AACvC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AAC9B,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;AACvC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;AACpC,IAAI,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAChD,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AAC5F,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;AAC/B,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;AAC5B,GAAG,CAAC,GAAG,CAAC,qCAAqC,EAAE,UAAU,GAAQ,EAAE,GAAQ;IACvE,2BAAY,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM;QACvC,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAC5C,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,gBAAM,CAAC,CAAC;AACrB,IAAI,MAAM,GAAQ,IAAI,CAAC,YAAY,CAAM,GAAG,CAAC,CAAC;AAC9C,IAAI,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AACpC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC","file":"server.js","sourcesContent":["/* tslint:disable */\nrequire('reflect-metadata');\nimport http = require(\"http\");\nimport express = require(\"express\");\nvar bodyParser = require(\"body-parser\");\nvar passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\nimport * as config from './config';\nimport * as securityConfig from 'nodedata/security-config';\nimport {router} from 'nodedata/core/exports';\nimport {repositoryMap} from 'nodedata/core/exports';\nimport {Container} from 'nodedata/di';\nimport { ScoreService } from './services/scoreService';\n\nimport * as data from 'nodedata/mongoose';\n//---------sequelize setting-----------------------------\nimport * as seqData  from \"nodedata/sequelizeimp\";\nvar Main = require('nodedata/core');\nMain(config, securityConfig, __dirname, data.entityServiceInst, seqData.sequelizeService);\n//var Main = require('./core')(config, securityConfig, __dirname, data.entityServiceInst, seqData.sequelizeService);\ndata.connect();\ndata.generateSchema();\nseqData.sequelizeService.connect();\nseqData.generateSchema();\n\nvar app = express();\nMain.register(app);\napp.set('views', __dirname + '/views');\napp.set('view engine', 'ejs');\napp.use(require('morgan')('combined'));\napp.use(require('cookie-parser')());\nvar expressSession = require('express-session');\napp.use(expressSession({ secret: 'mySecretKey', resave: false, saveUninitialized: false }));\napp.use(bodyParser.json());\napp.use(passport.initialize());\napp.use(passport.session());\napp.get(\"/data/score/searchAllWithAssessment\", function (req: any, res: any) {\n    ScoreService.findAll(req.query).then(result=> {\n        res.set(\"Content-Type\", \"application/json\");\n        res.send(result);\n    });\n});\napp.use(\"/\", router);\nvar server: any = http.createServer(<any>app);\nvar port = process.env.PORT || 9999;\nserver.listen(port);\n"]}