{"version":3,"sources":["decorators/serviceExecutorInterceptor.ts"],"names":[],"mappings":";AAAA,wBAAwB,8BAA8B,CAAC,CAAA;AAEvD,6BAAyB,cAAc,CAAC,CAAA;AACxC,iCAA4B,oCAAoC,CAAC,CAAA;AACjE,qDAAqD;AACrD,kCAA8B,mBAAmB,CAAC,CAAA;AAGlD,wBAA+B,MAA+B;IAC1D,MAAM,GAAG,MAAM,IAAS,EAAE,CAAC;IAE3B,MAAM,CAAC,UAAU,MAAgB,EAAE,WAAmB,EAAE,UAAe;QACnE,iBAAS,CAAC,WAAW,CAAC,MAAM,EACxB;YACI,SAAS,EAAE,uBAAU,CAAC,eAAe;YACrC,aAAa,EAAE,8BAAa,CAAC,MAAM;YACnC,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,WAAW;SAC3B,CAAC,CAAC;QAEP,IAAI,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QAEtC,UAAU,CAAC,KAAK,GAAG;YACf,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACxC,MAAM,CAAC,iCAAe,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM;gBACtF,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACP,CAAC,CAAA;QACD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC,CAAC;AACN,CAAC;AAtBe,sBAAc,iBAsB7B,CAAA","file":"serviceExecutorInterceptor.js","sourcesContent":["import {MetaUtils} from \"nodedata/core/metadata/utils\";\nimport * as Utils from \"nodedata/core/utils\";\nimport {Decorators} from './decorators';\nimport {DecoratorType} from 'nodedata/core/enums/decorator-type';\n//var domain = require('../../security/auth/domain');\nimport {ServiceExecutor} from './serviceExecutor';\nimport {IExecutorServiceParams} from './interfaces/executorServiceParams';\n\nexport function executeService(params?: IExecutorServiceParams): any {\n    params = params || <any>{};\n\n    return function (target: Function, propertyKey: string, descriptor: any) {\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.AUTHORINGSTATUS,\n                decoratorType: DecoratorType.METHOD,\n                params: params,\n                propertyKey: propertyKey\n            });\n\n        var originalMethod = descriptor.value;\n\n        descriptor.value = function () {\n            var args = Array.apply(this, arguments);\n            return ServiceExecutor.execute(params.serviceName, params.methodName, args[0]).then(result => {\n                return originalMethod.apply(this, arguments);\n            });\n        }\n        return descriptor;\n    };\n}\n"]}