{"version":3,"sources":["repositories/scoreRepository.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAAyB,0BAA0B,CAAC,CAAA;AACpD,wBAAoB,iBAAiB,CAAC,CAAA;AAEtC,0CAAsC,8DAA8D,CAAC,CAAA;AACrG,MAAY,YAAY,WAAM,0BAA0B,CAAC,CAAA;AAGzD,yBAAuB,+BAA+B,CAAC,CAAA;AAIvD,oDAA6C,iDAAuB;IAKhE,UAAU,CAAC,MAAyB;QAChC,IAAI,WAAW,GAAiB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAC7D,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACpD,CAAC;AAOL,CAAC;AAbG;IAAC,eAAM,CAAC,YAAY,CAAC;2CACc,YAAY;qDAD1B;AAHzB;IAAC,uBAAU,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,aAAK,EAAE,CAAC;;mBAAA;AAC5C;iCAeC,CAAA","file":"scoreRepository.js","sourcesContent":["import {repository} from \"nodedata/core/decorators\";\nimport {score} from '../models/score';\nimport {DynamicRepository} from 'nodedata/core/dynamic/dynamic-repository';\nimport {AuthorizationRepository} from 'nodedata/tests/repositories/security/AuthorizationRepository';\nimport * as ScoreService from '../services/scoreService';\nimport { entityAction, EntityActionParam } from \"nodedata/core/decorators/entityAction\";\nimport Q = require('q');\nimport { inject } from 'nodedata/di/decorators/inject';\nimport Mongoose = require(\"mongoose\");\n\n@repository({ path: 'score', model: score })\nexport default class scoreRepository extends AuthorizationRepository {\n\n    @inject(ScoreService)\n    private scoreService: ScoreService.ScoreService\n\n    postCreate(params: EntityActionParam): Q.Promise<any> {\n        let input_score: score = <score>(params.newPersistentEntity);\n        return this.scoreService.reporting(input_score);  \n    }\n\n    // postUpdate(params: EntityActionParam): Q.Promise<any> {\n    //     let input_score: score = <score>(params.newPersistentEntity);\n    //     return this.scoreService.reporting(input_score);\n    // }\n\n}"]}