{"version":3,"sources":["repositories/scoreRepository.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAAyB,0BAA0B,CAAC,CAAA;AACpD,wBAAoB,iBAAiB,CAAC,CAAA;AACtC,qCAAgC,0CAA0C,CAAC,CAAA;AAM3E,MAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AAGtC,oDAAqC,sCAAiB;IAElD,wBAAwB;IACxB,kDAAkD;IAElD,0DAA0D;IAC1D,oEAAoE;IACpE,yDAAyD;IACzD,IAAI;IAEJ,0DAA0D;IAC1D,oEAAoE;IACpE,uDAAuD;IACvD,IAAI;IAEJ,QAAQ,CAAC,MAAkB;QACvB,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,EAAC,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAG,YAAY,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,MAAM;gBACzI,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;gBACrB,EAAE,CAAC,CAAE,KAAM,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;gBACnC,CAAC;gBACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAClC,CAAC;YACL,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK;gBACV,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;AACL,CAAC;AAjCD;IAAC,uBAAU,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,aAAK,EAAE,CAAC;;mBAAA;AAC/B,uBAAe,kBAgC3B,CAAA;AAED;kBAAe,eAAe,CAAC","file":"scoreRepository.js","sourcesContent":["import {repository} from \"nodedata/core/decorators\";\nimport {score} from '../models/score';\nimport {DynamicRepository} from 'nodedata/core/dynamic/dynamic-repository';\n//import {AuthorizationRepository} from 'nodedata/tests/repositories/security/AuthorizationRepository';\nimport * as ScoreService from '../services/scoreService';\nimport { entityAction, EntityActionParam } from \"nodedata/core/decorators/entityAction\";\nimport Q = require('q');\nimport { inject } from 'nodedata/di/decorators/inject';\nimport Mongoose = require(\"mongoose\");\n\n@repository({ path: 'score', model: score })\nexport class scoreRepository extends DynamicRepository {\n\n    // @inject(ScoreService)\n    // private scoreService: ScoreService.ScoreService\n\n    // postCreate(params: EntityActionParam): Q.Promise<any> {\n    //     let input_score: score = <score>(params.newPersistentEntity);\n    //     return this.scoreService.reporting(input_score);  \n    // }\n\n    // postUpdate(params: EntityActionParam): Q.Promise<any> {\n    //     let input_score: score = <score>(params.newPersistentEntity);\n    //     return this.scoreService.reporting(input_score);\n    // }\n\n    bulkPost(objArr: Array<any>){\n        objArr.forEach((obj,i) => {\n            return this.findWhere({ \"student\": Mongoose.Types.ObjectId(obj.student) , \"assessment\": Mongoose.Types.ObjectId(obj.assessment)}).then(scores => {\n                var score = scores[0]\n                if ( score ) {\n                    objArr.splice(i, 1);                  \n                    return this.put(score._id, obj)\n                }\n                if (i == (objArr.length - 1)) {\n                    return super.bulkPost(objArr);\n                }\n            }).catch(error => {\n                return error;\n            });\n        });\n        return super.bulkPost([]);\n    }\n}\n\nexport default scoreRepository;"]}