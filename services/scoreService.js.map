{"version":3,"sources":["services/scoreService.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAAsB,wBAAwB,CAAC,CAAA;AAC/C,yBAAqB,+BAA+B,CAAC,CAAA;AAGrD,MAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AACtC,wEAAwE;AACxE,oEAAoE;AACpE,MAAY,eAAe,WAAM,iCAAiC,CAAC,CAAA;AAInE;;IAWI,0BAA0B;IAC1B,kCAAkC;IAClC,uGAAuG;IACvG,mCAAmC;IACnC,4CAA4C;IAC5C,8BAA8B;IAC9B,uHAAuH;IACvH,uEAAuE;IACvE,mHAAmH;IACnH,qFAAqF;IACrF,yFAAyF;IACzF,kGAAkG;IAClG,8DAA8D;IAC9D,yEAAyE;IACzE,8FAA8F;IAC9F,oBAAoB;IACpB,qDAAqD;IACrD,gDAAgD;IAChD,0DAA0D;IAC1D,oEAAoE;IACpE,wEAAwE;IACxE,4EAA4E;IAC5E,gFAAgF;IAChF,6EAA6E;IAC7E,gBAAgB;IAChB,oBAAoB;IACpB,yDAAyD;IACzD,4DAA4D;IAC5D,iDAAiD;IACjD,sEAAsE;IACtE,+FAA+F;IAC/F,yFAAyF;IACzF,sBAAsB;IACtB,gBAAgB;IAChB,8BAA8B;IAC9B,2BAA2B;IAC3B,cAAc;IAEd,QAAQ;IACR,IAAI;IAEJ,OAAc,OAAO,CAAC,MAAW;QAC7B,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YAChF,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACjC,MAAM,CAAC,cAAY,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;QACxE,CAAC;IACL,CAAC;AACL,CAAC;AApDG;IAAC,eAAM,CAAC,eAAe,CAAC;8CACgB,eAAe;2CAD/B;AAT5B;IAAC,oBAAO,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC;;gBAAA;AAC7C,oBAAY,eA4DxB,CAAA;AAED;kBAAe,YAAY,CAAC","file":"scoreService.js","sourcesContent":["import {service} from 'nodedata/di/decorators';\nimport {inject} from 'nodedata/di/decorators/inject';\nimport {report} from '../models/report';\nimport { test1 } from '../models/test';\nimport mongoose = require(\"mongoose\");\n// import * as reportRepository from '../repositories/reportRepository';\n// import * as testRepository from '../repositories/testRepository';\nimport * as scoreRepository from '../repositories/scoreRepository';\n\n\n@service({ singleton: true, serviceName: 'scoreService' })\nexport class ScoreService {\n\n    // @inject(reportRepository)\n    // private reportRepository: reportRepository.ReportRepository;\n\n    // @inject(testRepository)\n    // private testRepository: testRepository.testRepository;\n\n    @inject(scoreRepository)\n    static scoreRepository: scoreRepository.scoreRepository;\n\n    // reporting(input_score){\n    //     if(input_score.assessment){\n    //         return this.testRepository.findWhere({_id: input_score.assessment}).then((tests: test1) => {\n    //             let test = tests[0];\n    //             let old_report = test.report;\n    //             if(old_report){\n    //                 let max_marks = old_report.max_marks > input_score.marks ? old_report.max_marks : input_score.marks;\n    //                 let total_students = old_report.total_students + 1 ;\n    //                 let total_average_score = (old_report.total_average_score + input_score.marks) / total_students;\n    //                 let total_students_passed = old_report.total_students_passed || 0;\n    //                 let average_pass_percentage = old_report.average_pass_percentage || 0;\n    //                 let average_scored_percentage = (total_average_score/test.maximum_marks) * 100;\n    //                 if(input_score.marks > test.passing_marks){\n    //                     total_students_passed = total_students_passed + 1;\n    //                     average_pass_percentage = (total_students_passed/total_students) * 100;\n    //                 }\n    //             let report_obj: report = new report();\n    //             report_obj.max_marks = max_marks;\n    //             report_obj.total_students = total_students;\n    //             report_obj.total_average_score = total_average_score;\n    //             report_obj.total_students_passed = total_students_passed;\n    //             report_obj.average_pass_percentage = average_pass_percentage;\n    //             report_obj.average_scored_percentage = average_scored_percentage;\n    //             return this.reportRepository.patch(old_report._id,report_obj);\n    //             }\n    //             else{\n    //                 let report_obj: report = new report();\n    //                 report_obj.max_marks = input_score.marks;\n    //                 report_obj.total_students = 1;\n    //                 report_obj.total_average_score = input_score.marks;\n    //                 return this.reportRepository.post(report_obj).then((new_report: report) => {\n    //                     return this.testRepository.patch(test._id,{'report': new_report});\n    //                 });\n    //             }\n    //         }).catch(error => {\n    //             throw error;\n    //         });\n            \n    //     }\n    // }\n\n    public static findAll(params: any) {\n        if (params[\"assessment\"]) {\n            params[\"assessment\"] = mongoose.Types.ObjectId(params[\"assessment\"].toString());\n            var options = {};\n            console.log(\"Querying Database\");\n            return ScoreService.scoreRepository.findWhere(params, null, options)\n        }\n    } \n}\n\nexport default ScoreService;"]}