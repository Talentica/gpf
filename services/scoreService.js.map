{"version":3,"sources":["services/scoreService.ts"],"names":[],"mappings":"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","file":"scoreService.js","sourcesContent":["import {service} from 'nodedata/di/decorators';\nimport {inject} from 'nodedata/di/decorators/inject';\nimport {report} from '../models/report';\nimport {test1} from '../models/test';\nimport * as reportRepository from '../repositories/reportRepository';\nimport * as testRepository from '../repositories/testRepository';\n\n@service({ singleton: true, serviceName: 'scoreService' })\nexport class ScoreService {\n\n    @inject(reportRepository)\n    private reportRepository: reportRepository.ReportRepository;\n\n    @inject(testRepository)\n    private testRepository: testRepository.testRepository;\n\n    reporting(input_score){\n        if(input_score.assessment){\n            return this.testRepository.findWhere({_id: input_score.assessment}).then((tests: test1) => {\n                let test = tests[0];\n                let old_report = test.report;\n                if(old_report){\n                    let max_marks = old_report.max_marks > input_score.marks ? old_report.max_marks : input_score.marks;\n                    let total_students = old_report.total_students + 1 ;\n                    let total_average_score = (old_report.total_average_score + input_score.marks) / total_students;\n                    let total_students_passed = old_report.total_students_passed || 0;\n                    let average_pass_percentage = old_report.average_pass_percentage || 0;\n                    let average_scored_percentage = (total_average_score/test.maximum_marks) * 100;\n                    if(input_score.marks > test.passing_marks){\n                        total_students_passed = total_students_passed + 1;\n                        average_pass_percentage = (total_students_passed/total_students) * 100;\n                    }\n                let report_obj: report = new report();\n                report_obj.max_marks = max_marks;\n                report_obj.total_students = total_students;\n                report_obj.total_average_score = total_average_score;\n                report_obj.total_students_passed = total_students_passed;\n                report_obj.average_pass_percentage = average_pass_percentage;\n                report_obj.average_scored_percentage = average_scored_percentage;\n                return this.reportRepository.patch(old_report._id,report_obj);\n                }\n                else{\n                    let report_obj: report = new report();\n                    report_obj.max_marks = input_score.marks;\n                    report_obj.total_students = 1;\n                    report_obj.total_average_score = input_score.marks;\n                    return this.reportRepository.post(report_obj).then((new_report: report) => {\n                        return this.testRepository.patch(test._id,{'report': new_report});\n                    });\n                }\n            }).catch(error => {\n                throw error;\n            });\n            \n        }\n    }\n}\n\nexport default ScoreService;"]}